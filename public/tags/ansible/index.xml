<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ansible on Nick Fisher&#39;s tech blog</title>
    <link>http://localhost:1313/tags/ansible/</link>
    <description>Recent content in Ansible on Nick Fisher&#39;s tech blog</description>
    <generator>Hugo</generator>
    <language>en-US</language>
    <copyright>2018-{year}</copyright>
    <lastBuildDate>Sun, 16 Jun 2019 17:14:49 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/ansible/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to Create Multiple Digital Ocean Droplets and Provision Them Using Ansible</title>
      <link>http://localhost:1313/blog/how-to-create-multiple-digital-ocean-droplets-and-provision-them-using-ansible/</link>
      <pubDate>Sun, 16 Jun 2019 17:14:49 +0000</pubDate>
      <guid>http://localhost:1313/blog/how-to-create-multiple-digital-ocean-droplets-and-provision-them-using-ansible/</guid>
      <description>&lt;p&gt;In a previous post, we saw &lt;a href=&#34;https://nickolasfisher.com/blog/How-To-Create-a-Digital-Ocean-Droplet-and-Provision-It-Using-Ansible&#34;&gt;how to create a digital ocean droplet and provision it with Ansible&lt;/a&gt;. Creating multiple droplets is very similar, you mostly just have to pay attention to the response object that you get back, which is different in the single vs. the many case.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How To Create a Digital Ocean Droplet and Provision It Using Ansible</title>
      <link>http://localhost:1313/blog/how-to-create-a-digital-ocean-droplet-and-provision-it-using-ansible/</link>
      <pubDate>Sat, 15 Jun 2019 20:40:48 +0000</pubDate>
      <guid>http://localhost:1313/blog/how-to-create-a-digital-ocean-droplet-and-provision-it-using-ansible/</guid>
      <description>&lt;p&gt;Ansible allows you to provision servers in an idempotent fashion. It lets you see the state of your VM configuration as it resides in code, which is light years better than the sysadmin ways of yesterday.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to Run a Script on Cluster State Change Using Consul Watch</title>
      <link>http://localhost:1313/blog/how-to-run-a-script-on-cluster-state-change-using-consul-watch/</link>
      <pubDate>Sat, 25 May 2019 22:18:42 +0000</pubDate>
      <guid>http://localhost:1313/blog/how-to-run-a-script-on-cluster-state-change-using-consul-watch/</guid>
      <description>&lt;p&gt;You can see the sample code for this post &lt;a href=&#34;https://github.com/nfisher23/some-ansible-examples/tree/master/consul-server&#34;&gt;on Github&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.consul.io/docs/agent/watches.html&#34;&gt;Consul Watches&lt;/a&gt; offer a way to hook into changes to the Consul cluster state at runtime.The specific type of changes we will be looking at hooking into in this post are &lt;a href=&#34;https://www.consul.io/docs/agent/watches.html#type-checks&#34;&gt;checks&lt;/a&gt;. Whenever a node or service comes online and registers to Consul, whenever an existing node or service leaves Consul, or whenever an existing node or service becomes unresponsive, Consul will emit a check event. This check event can invoke a process to monitor the health of our services, alerting human being that action might soon be necessary.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to Provision a Consul Client-Server Cluster using Ansible</title>
      <link>http://localhost:1313/blog/how-to-provision-a-consul-clientserver-cluster-using-ansible/</link>
      <pubDate>Sat, 27 Apr 2019 21:15:18 +0000</pubDate>
      <guid>http://localhost:1313/blog/how-to-provision-a-consul-clientserver-cluster-using-ansible/</guid>
      <description>&lt;p&gt;The source code for this blog post can be found &lt;a href=&#34;https://github.com/nfisher23/some-ansible-examples/tree/master/consul-server&#34;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.consul.io&#34;&gt;Consul&lt;/a&gt; can run in either client or server mode. As far as Consul is concerned, the primary difference between client and server mode are that Consul Servers participate in the consensus quorum, store cluster state, and handle queries. Consul Agents are often deployed to act as middle-men between the services and the Consul Servers, which need to be highly available by design.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to Provision a Standalone Consul Server with Ansible</title>
      <link>http://localhost:1313/blog/how-to-provision-a-standalone-consul-server-with-ansible/</link>
      <pubDate>Sat, 27 Apr 2019 19:49:14 +0000</pubDate>
      <guid>http://localhost:1313/blog/how-to-provision-a-standalone-consul-server-with-ansible/</guid>
      <description>&lt;p&gt;You can find the source code for this post &lt;a href=&#34;https://github.com/nfisher23/some-ansible-examples/tree/master/consul-server&#34;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.consul.io/&#34;&gt;Consul&lt;/a&gt; is a distributed service discovery engine. It&#39;s primary purpose is to track and manage services that interact with it&amp;ndash;usually via an HTTP API. It monitors the health of services in near real time, providing a more robust way of routing services to healthy and responsive nodes.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How To Invalidate an Nginx Cache In a Reverse Proxy Setup With Spring MVC</title>
      <link>http://localhost:1313/blog/how-to-invalidate-an-nginx-cache-in-a-reverse-proxy-setup-with-spring-mvc/</link>
      <pubDate>Sat, 13 Apr 2019 16:52:53 +0000</pubDate>
      <guid>http://localhost:1313/blog/how-to-invalidate-an-nginx-cache-in-a-reverse-proxy-setup-with-spring-mvc/</guid>
      <description>&lt;p&gt;You can see the sample code associated with this post &lt;a href=&#34;https://github.com/nfisher23/some-ansible-examples/tree/master/reverse-proxy-nginx&#34;&gt;on Github&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;In two previous posts, we looked at how to &lt;a href=&#34;https://nickolasfisher.com/blog/How-to-Deploy-a-Spring-MVC-Application-Behind-an-Nginx-Reverse-Proxy&#34;&gt;provision a reverse proxy using nginx&lt;/a&gt; and then &lt;a href=&#34;https://nickolasfisher.com/blog/How-to-Use-Nginxs-Caching-to-Improve-Site-Responsiveness&#34;&gt;how to add caching to the nginx reverse proxy&lt;/a&gt;. The implementation we ended up with at the end of the last post was a &amp;quot;dumb&amp;quot; cache, meaning that it doesn&#39;t know when or if any data gets updated&amp;ndash;it just times out after 60 seconds and then asks for a new payload from the application it&#39;s acting as proxy for.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to Use Nginx&amp;#39;s Caching to Improve Site Responsiveness</title>
      <link>http://localhost:1313/blog/how-to-use-nginxs-caching-to-improve-site-responsiveness/</link>
      <pubDate>Sat, 06 Apr 2019 17:14:30 +0000</pubDate>
      <guid>http://localhost:1313/blog/how-to-use-nginxs-caching-to-improve-site-responsiveness/</guid>
      <description>&lt;p&gt;The source code for this post &lt;a href=&#34;https://github.com/nfisher23/some-ansible-examples/tree/master/reverse-proxy-nginx&#34;&gt;can be found on Github&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;In my last post, I provided an example for &lt;a href=&#34;https://nickolasfisher.com/blog/How-to-Deploy-a-Spring-MVC-Application-Behind-an-Nginx-Reverse-Proxy&#34;&gt;how to set up an Nginx Reverse Proxy for a Spring MVC application&lt;/a&gt;. One such reason to set up a reverse proxy is to utilize caching of resources. If you have dynamically generated content that doesn&#39;t change very often, then adding caching at the site entry point can dramatically improve site responsiveness and reduce load on critical resources.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to Deploy a Spring MVC Application Behind an Nginx Reverse Proxy</title>
      <link>http://localhost:1313/blog/how-to-deploy-a-spring-mvc-application-behind-an-nginx-reverse-proxy/</link>
      <pubDate>Sat, 06 Apr 2019 14:44:50 +0000</pubDate>
      <guid>http://localhost:1313/blog/how-to-deploy-a-spring-mvc-application-behind-an-nginx-reverse-proxy/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.nginx.com/&#34;&gt;Nginx&lt;/a&gt; is a popular webserver, excellent at serving up static content, and commonly used as a load balancer or reverse proxy. This post will set up a basic &lt;a href=&#34;https://spring.io/projects/spring-boot&#34;&gt;Spring Boot&lt;/a&gt; MVC web application, and use Nginx as a reverse proxy. The source code can be found &lt;a href=&#34;https://github.com/nfisher23/some-ansible-examples/tree/master/reverse-proxy-nginx&#34;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How To Upgrade Kibana using Ansible</title>
      <link>http://localhost:1313/blog/how-to-upgrade-kibana-using-ansible/</link>
      <pubDate>Sat, 23 Mar 2019 21:14:22 +0000</pubDate>
      <guid>http://localhost:1313/blog/how-to-upgrade-kibana-using-ansible/</guid>
      <description>&lt;p&gt;You can view the sample code associated with this post &lt;a href=&#34;https://github.com/nfisher23/some-ansible-examples&#34;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;In a previous post on &lt;a href=&#34;https://nickolasfisher.com/blog/How-to-Provision-a-Linux-VM-With-Kibana-Using-Ansible&#34;&gt;Provisioning a Server with Kibana&lt;/a&gt;, we saw that it&#39;s very straightforward to get kibana on a box.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to do a Rolling Upgrade of Multiple Logstash Instances Using Ansible</title>
      <link>http://localhost:1313/blog/how-to-do-a-rolling-upgrade-of-multiple-logstash-instances-using-ansible/</link>
      <pubDate>Sun, 17 Mar 2019 23:27:43 +0000</pubDate>
      <guid>http://localhost:1313/blog/how-to-do-a-rolling-upgrade-of-multiple-logstash-instances-using-ansible/</guid>
      <description>&lt;p&gt;You can see the source code for this post &lt;a href=&#34;https://github.com/nfisher23/some-ansible-examples&#34;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;In a previous post on &lt;a href=&#34;https://nickolasfisher.com/blog/How-to-Provision-Multiple-Logstash-Hosts-Using-Ansible&#34;&gt;How to Provision Multiple Logstash Hosts Using Ansible&lt;/a&gt;, we saw that provisioning logstash is pretty straightforward. However, what do we do with it after it&#39;s been out there transforming messages this entire time? Given that elastic comes out with a new version of Logstash every fifteen or twenty minutes, a wise person would look to automate the upgrade process as soon as possible.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to do a Rolling Upgrade of an Elasticsearch Cluster Using Ansible</title>
      <link>http://localhost:1313/blog/how-to-do-a-rolling-upgrade-of-an-elasticsearch-cluster-using-ansible/</link>
      <pubDate>Sat, 16 Mar 2019 23:17:03 +0000</pubDate>
      <guid>http://localhost:1313/blog/how-to-do-a-rolling-upgrade-of-an-elasticsearch-cluster-using-ansible/</guid>
      <description>&lt;p&gt;You can see the source code for this blog post &lt;a href=&#34;https://github.com/nfisher23/some-ansible-examples&#34;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;In a previous post, we saw &lt;a href=&#34;https://nickolasfisher.com/blog/How-to-Provision-a-Multi-Node-Elasticsearch-Cluster-Using-Ansible&#34;&gt;how to provision a multi-node elasticsearch cluster using ansible&lt;/a&gt;. The problem with that post is that, by the time I was done writing it, &lt;em&gt;Elastic had already come out with a new version of elasticsearch&lt;/em&gt;. I&#39;m being mildly facetious, but not really. They release new versions very quickly, even by the standards of modern software engineering.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to Provision a Linux VM With Kibana Using Ansible</title>
      <link>http://localhost:1313/blog/how-to-provision-a-linux-vm-with-kibana-using-ansible/</link>
      <pubDate>Sat, 16 Mar 2019 15:37:40 +0000</pubDate>
      <guid>http://localhost:1313/blog/how-to-provision-a-linux-vm-with-kibana-using-ansible/</guid>
      <description>&lt;p&gt;The corresponding source code for this post is available &lt;a href=&#34;https://github.com/nfisher23/some-ansible-examples&#34;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/products/kibana&#34;&gt;Kibana&lt;/a&gt; is a fancy pants web application that tries to make data in Elasticsearch user-friendly. Rounding out the previous two posts on &lt;a href=&#34;https://nickolasfisher.com/blog/How-to-Provision-a-Multi-Node-Elasticsearch-Cluster-Using-Ansible&#34;&gt;how to install an elasticsearch cluster&lt;/a&gt; and &lt;a href=&#34;https://nickolasfisher.com/blog/How-to-Install-Multiple-Logstash-Hosts-Using-Ansible&#34;&gt;how to install multiple logstash hosts&lt;/a&gt;, I will now show you how to stack kibana on top of them.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to Provision Multiple Logstash Hosts Using Ansible</title>
      <link>http://localhost:1313/blog/how-to-provision-multiple-logstash-hosts-using-ansible/</link>
      <pubDate>Wed, 06 Mar 2019 23:33:35 +0000</pubDate>
      <guid>http://localhost:1313/blog/how-to-provision-multiple-logstash-hosts-using-ansible/</guid>
      <description>&lt;p&gt;The source code for this post can be found &lt;a href=&#34;https://github.com/nfisher23/some-ansible-examples&#34;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/products/logstash&#34;&gt;Logstash&lt;/a&gt; primarily exists to extract useful information out of plain-text logs. Most applications have custom logs which are in whatever format the person writing them thought would look reasonable&amp;hellip;usually to a human, and not to a machine. While countless future developer hours would be preserved if everything were just in JSON, that is sadly not even remotely the case, and in particular it&#39;s not the case for log files. Logstash aims to be the intermediary between the various log formats and Elasticsearch, which is the document database provided by Elastic as well.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to Provision a Multi Node Elasticsearch Cluster Using Ansible</title>
      <link>http://localhost:1313/blog/how-to-provision-a-multi-node-elasticsearch-cluster-using-ansible/</link>
      <pubDate>Sun, 03 Mar 2019 23:15:27 +0000</pubDate>
      <guid>http://localhost:1313/blog/how-to-provision-a-multi-node-elasticsearch-cluster-using-ansible/</guid>
      <description>&lt;p&gt;You can see the sample code for this tutorial &lt;a href=&#34;https://github.com/nfisher23/some-ansible-examples&#34;&gt;on GitHub.&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/products/elasticsearch&#34;&gt;Elasticsearch&lt;/a&gt; is a distributed, NoSQL, document database, built on top of Lucene. There are so many things I could say about Elasticsearch, but instead I&#39;ll focus on how to install a simple 3-node cluster with an Ansible role. The following example will not have any security baked into it, so it&#39;s really just a starting point to get you up and running.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to do Test Driven Development on Your Ansible Roles Using Molecule</title>
      <link>http://localhost:1313/blog/how-to-do-test-driven-development-on-your-ansible-roles-using-molecule/</link>
      <pubDate>Sun, 03 Mar 2019 20:18:22 +0000</pubDate>
      <guid>http://localhost:1313/blog/how-to-do-test-driven-development-on-your-ansible-roles-using-molecule/</guid>
      <description>&lt;p&gt;You can see the sample code for this tutorial &lt;a href=&#34;https://github.com/nfisher23/some-ansible-examples&#34;&gt;on GitHub.&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;﻿ &lt;a href=&#34;https://molecule.readthedocs.io/en/latest/&#34;&gt;Molecule&lt;/a&gt; is primarily a way to manage the testing of infrastructure automation code. At its core, it wraps around various providers like Vagrant, Docker, or VMWare, and provides relatively simple integration with testing providers, notably &lt;a href=&#34;https://testinfra.readthedocs.io/en/latest/&#34;&gt;TestInfra&lt;/a&gt;. Molecule is a great tool, but in my opinion there are not enough resources, by way of examples, to provide an adequate getting started guide. This post is meant to help fill that void.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to run a SQL Script Against a Postgres Database Using Ansible</title>
      <link>http://localhost:1313/blog/how-to-run-a-sql-script-against-a-postgres-database-using-ansible/</link>
      <pubDate>Sat, 09 Feb 2019 15:44:26 +0000</pubDate>
      <guid>http://localhost:1313/blog/how-to-run-a-sql-script-against-a-postgres-database-using-ansible/</guid>
      <description>&lt;p&gt;The source code for this post can be found &lt;a href=&#34;https://github.com/nfisher23/run-sql-ansible-postgres&#34;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Managing a live database, and in particular dealing with database migrations without allowing for any downtime in your application, is typically the most challenging part of any automated deployment strategy. Services can be spun up and down with impunity because their state at the beginning and at the end are exactly the same, but databases store data&amp;ndash;their state is always changing.&lt;/p&gt;</description>
    </item>
    <item>
      <title>A Simple Zero Downtime Continuous Integration Pipeline for Spring MVC</title>
      <link>http://localhost:1313/blog/a-simple-zero-downtime-continuous-integration-pipeline-for-spring-mvc/</link>
      <pubDate>Sun, 25 Nov 2018 15:53:22 +0000</pubDate>
      <guid>http://localhost:1313/blog/a-simple-zero-downtime-continuous-integration-pipeline-for-spring-mvc/</guid>
      <description>&lt;p&gt;The sample code associated with what follows can be found &lt;a href=&#34;https://github.com/nfisher23/simple-cicd-pipeline-with-spring&#34;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;One of the biggest paradigm shifts in software engineering, since the invention of the computer and software that would run on it, was the idea of a MVR (minimum viable release) or MVP (minimum viable product). With the lack of internet access becoming the exception in developed countries, it becomes more and more powerful to put your product out there on display, and to design a way to continuously make improvements to it. In the most aggressive of circumstances, you want to be able to push something up to a source control server, then let an automated process perform the various steps required to actually deploy it in the real world. In the best case, you can achieve all of this with zero downtime&amp;ndash;basically, the users of your service are never inconvenienced by your decision to make a change. Setting up one very simple example of that is the subject of this post.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to Provision a Server with Java using Ansible</title>
      <link>http://localhost:1313/blog/how-to-provision-a-server-with-java-using-ansible/</link>
      <pubDate>Sun, 18 Nov 2018 17:15:01 +0000</pubDate>
      <guid>http://localhost:1313/blog/how-to-provision-a-server-with-java-using-ansible/</guid>
      <description>&lt;p&gt;In my post about &lt;a href=&#34;https://nickolasfisher.com/blog/How-to-Provision-a-Linux-Server-With-Any-Version-of-Java-via-a-Bash-Script&#34;&gt;how to provision any version of Java using a bash script&lt;/a&gt;, we saw that:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
