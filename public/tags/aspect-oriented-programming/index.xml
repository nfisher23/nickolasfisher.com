<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Aspect Oriented Programming on Nick Fisher's tech blog</title><link>https://www.nickolasfisher.com/tags/aspect-oriented-programming/</link><description>Recent content in Aspect Oriented Programming on Nick Fisher's tech blog</description><generator>Hugo</generator><language>en-US</language><copyright>2018-{year}</copyright><lastBuildDate>Sat, 13 Apr 2019 16:52:53 +0000</lastBuildDate><atom:link href="https://www.nickolasfisher.com/tags/aspect-oriented-programming/index.xml" rel="self" type="application/rss+xml"/><item><title>How To Invalidate an Nginx Cache In a Reverse Proxy Setup With Spring MVC</title><link>https://www.nickolasfisher.com/blog/how-to-invalidate-an-nginx-cache-in-a-reverse-proxy-setup-with-spring-mvc/</link><pubDate>Sat, 13 Apr 2019 16:52:53 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/how-to-invalidate-an-nginx-cache-in-a-reverse-proxy-setup-with-spring-mvc/</guid><description>&lt;p>You can see the sample code associated with this post &lt;a href="https://github.com/nfisher23/some-ansible-examples/tree/master/reverse-proxy-nginx">on Github&lt;/a>.&lt;/p>
&lt;p>In two previous posts, we looked at how to &lt;a href="https://nickolasfisher.com/blog/How-to-Deploy-a-Spring-MVC-Application-Behind-an-Nginx-Reverse-Proxy">provision a reverse proxy using nginx&lt;/a> and then &lt;a href="https://nickolasfisher.com/blog/How-to-Use-Nginxs-Caching-to-Improve-Site-Responsiveness">how to add caching to the nginx reverse proxy&lt;/a>. The implementation we ended up with at the end of the last post was a &amp;ldquo;dumb&amp;rdquo; cache, meaning that it doesn&amp;rsquo;t know when or if any data gets updated&amp;ndash;it just times out after 60 seconds and then asks for a new payload from the application it&amp;rsquo;s acting as proxy for.&lt;/p></description></item><item><title>How to Use Spring's Aspect Oriented Programming to log all Public Methods</title><link>https://www.nickolasfisher.com/blog/how-to-use-springs-aspect-oriented-programming-to-log-all-public-methods/</link><pubDate>Sun, 18 Nov 2018 14:40:55 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/how-to-use-springs-aspect-oriented-programming-to-log-all-public-methods/</guid><description>&lt;p>The sample code for this post can be found &lt;a href="https://github.com/nfisher23/spring-aop-universal-public-logger">on GitHub&lt;/a>.&lt;/p>
&lt;p>&lt;a href="https://docs.spring.io/spring/docs/2.5.x/reference/aop.html">Aspect Oriented Programming In Spring&lt;/a> is a clever way to reduce code duplication, by taking a different approach than traditional tools like dependency injection or inheritance. Cross cutting concerns like security and logging can permeate a code base and make maintainability a nightmare unless properly taken care of, and aspect oriented programming is one way to properly take care of that, when used appropriately. This post will illustrate how to get started with a transparent way to log without cluttering up business logic.&lt;/p></description></item></channel></rss>