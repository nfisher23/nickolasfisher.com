<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Aws on Nick Fisher's tech blog</title><link>https://www.nickolasfisher.com/tags/aws/</link><description>Recent content in Aws on Nick Fisher's tech blog</description><generator>Hugo</generator><language>en-US</language><copyright>2018-{year}</copyright><lastBuildDate>Sat, 24 Apr 2021 23:52:19 +0000</lastBuildDate><atom:link href="https://www.nickolasfisher.com/tags/aws/index.xml" rel="self" type="application/rss+xml"/><item><title>Why Redis Pub/Sub is not SQS, and Vice Versa</title><link>https://www.nickolasfisher.com/blog/why-redis-pubsub-is-not-sqs-and-vice-versa/</link><pubDate>Sat, 24 Apr 2021 23:52:19 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/why-redis-pubsub-is-not-sqs-and-vice-versa/</guid><description>&lt;p>&lt;a href="https://redis.io/topics/pubsub">Redis has a pub/sub feature&lt;/a> whereby there are publishers and subscribers, and publishers can fanout messages to subscribers. SQS [ &lt;a href="https://aws.amazon.com/sqs/">amazon&amp;rsquo;s simple queue service&lt;/a>] has message senders and receivers. They can both be useful, but in practice they produce different results.&lt;/p></description></item><item><title>Setup and Use a DynamoDB Test Container with the AWS Java SDK 2.0</title><link>https://www.nickolasfisher.com/blog/setup-and-use-a-dynamodb-test-container-with-the-aws-java-sdk-20/</link><pubDate>Sat, 10 Apr 2021 16:13:09 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/setup-and-use-a-dynamodb-test-container-with-the-aws-java-sdk-20/</guid><description>&lt;p>The source code for this article &lt;a href="https://github.com/nfisher23/webflux-and-dynamo">can be found on Github&lt;/a>.&lt;/p>
&lt;p>Using &lt;a href="https://nickolasfisher.com/blog/Configuring-an-In-Memory-DynamoDB-instance-with-Java-for-Integration-Testing">embedded dynamodb for testing&lt;/a> is, in my experience, kind of flakey and unpredictable. Because of the weird way it pulls in SQLite on a per operating system basis, it can sometimes work locally and not work on the build server. Sometimes it&amp;rsquo;s just not working for some unexplained reason and wiping the directory that the code is in and re-cloning fixes it. Not a fun time.&lt;/p></description></item><item><title>Setting up a Python Lambda to Trigger on DynamoDB Streams via the AWS CLI</title><link>https://www.nickolasfisher.com/blog/setting-up-a-python-lambda-to-trigger-on-dynamodb-streams-via-the-aws-cli/</link><pubDate>Sun, 07 Feb 2021 19:47:50 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/setting-up-a-python-lambda-to-trigger-on-dynamodb-streams-via-the-aws-cli/</guid><description>&lt;p>DynamoDB streams record information about what has changed in a DynamoDB table, and AWS lambdas are ways to run code without managing servers yourself. DynamoDB streams also have an integration with AWS Lambdas so that any change to a DynamoDB table can be processed by an AWS Lambda&amp;ndash;still without worrying about keeping your servers up or maintaining them. That is the subject of this post.&lt;/p></description></item><item><title>Basic Python Lambda Function Uploads using the AWS CLI</title><link>https://www.nickolasfisher.com/blog/basic-python-lambda-function-uploads-using-the-aws-cli/</link><pubDate>Sat, 06 Feb 2021 21:07:12 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/basic-python-lambda-function-uploads-using-the-aws-cli/</guid><description>&lt;p>AWS Lambda functions were the first &amp;ldquo;serverless&amp;rdquo; way to run code. Of course, there are still servers, but the point is that you can nearly forget about managing those servers and all of that is owned by AWS.&lt;/p></description></item><item><title>DynamoDB Transactions and Java</title><link>https://www.nickolasfisher.com/blog/dynamodb-transactions-and-java/</link><pubDate>Sat, 28 Nov 2020 20:57:47 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/dynamodb-transactions-and-java/</guid><description>&lt;p>DynamoDB transactions can be used for &lt;em>atomic&lt;/em> updates. Atomic updates in DynamoDB without transactions can be difficult to implement&amp;ndash;you&amp;rsquo;ll often have to manage the current state of the update yourself in something like a saga, and have business logic specific rollback procedures. Further, without a transaction manager, the data will be in an inconsistent state at some point in time while the saga is ongoing. An alternative to that is a Two Phase Commit, but that&amp;rsquo;s also expensive both from the standpoint of developers making it work as well as performance [2PC typically call for a lock being held during the operation, and even then there&amp;rsquo;s a possibility that the operation ends up in an inconsistent state at some point].&lt;/p></description></item><item><title>Publishing to SNS in Java with the AWS SDK 2.0</title><link>https://www.nickolasfisher.com/blog/publishing-to-sns-in-java-with-the-aws-sdk-20/</link><pubDate>Sat, 28 Nov 2020 20:16:05 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/publishing-to-sns-in-java-with-the-aws-sdk-20/</guid><description>&lt;p>SNS is a medium to broadcast messages to multiple subscribers. A common use case is to have multiple SQS queues subscribing to the same SNS topic&amp;ndash;this way, the &lt;em>publishing&lt;/em> application only needs to focus on events that are specific to its business use case, and &lt;em>subscribing&lt;/em> applications can configure an SQS queue and consume the event independently of other services. This helps organizations scale and significantly reduces the need to communicate between teams&amp;ndash;each team can focus on its contract and business use case.&lt;/p></description></item><item><title>Working with Nested Attributes, DynamoDB, and the Java SDK 2.0</title><link>https://www.nickolasfisher.com/blog/working-with-nested-attributes-dynamodb-and-the-java-sdk-20/</link><pubDate>Sun, 15 Nov 2020 22:59:11 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/working-with-nested-attributes-dynamodb-and-the-java-sdk-20/</guid><description>&lt;p>&lt;a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.Attributes.html">Nested attributes in DynamoDB&lt;/a> are a way to group data within an item together. The attributes are said to be nested if they are embedded within another attribute.&lt;/p></description></item><item><title>Scanning a DynamoDB table in Java with the AWS SDK 2.0</title><link>https://www.nickolasfisher.com/blog/scanning-a-dynamodb-table-in-java-with-the-aws-sdk-20/</link><pubDate>Sat, 07 Nov 2020 02:08:37 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/scanning-a-dynamodb-table-in-java-with-the-aws-sdk-20/</guid><description>&lt;p>&lt;a href="https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Scan.html">Scanning in DynamoDB&lt;/a> is exactly what it sounds like: loop through every single record in a table, optionally filtering for items with a certain condition when dynamo returns them to you. In general, you &lt;em>shouldn&amp;rsquo;t do this&lt;/em>. DynamoDB is designed to store and manage a very large amount of data. Scanning through a large amount of data is very expensive, even in a distributed world. In the best case, you&amp;rsquo;ll be waiting a long time to see results. In the worst case, you might see service outages as you burn through your RCUs.&lt;/p></description></item><item><title>DynamoDB and Duplicate Keys in Global Secondary Indexes</title><link>https://www.nickolasfisher.com/blog/dynamodb-and-duplicate-keys-in-global-secondary-indexes/</link><pubDate>Sun, 01 Nov 2020 23:27:39 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/dynamodb-and-duplicate-keys-in-global-secondary-indexes/</guid><description>&lt;p>If there&amp;rsquo;s something in the documentation about what the behavior of a DynamoDB Global Secondary Index is when there are duplicate keys in the index, it isn&amp;rsquo;t easy to find. I tested this empirically with an embedded DynamoDB mock for java and will quickly share my findings here with you.&lt;/p></description></item><item><title>Query a DynamoDB Global Secondary Index in Java</title><link>https://www.nickolasfisher.com/blog/query-a-dynamodb-global-secondary-index-in-java/</link><pubDate>Sun, 01 Nov 2020 22:40:46 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/query-a-dynamodb-global-secondary-index-in-java/</guid><description>&lt;p>A &lt;a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GSI.html">DynamoDB Global Secondary Index&lt;/a> is an eventually consistent way to efficiently query for data that is not normally found without a table scan. It has &lt;a href="https://nickolasfisher.com/blog/Query-a-DynamoDB-Local-Secondary-Index-with-Java">some similarities to Local Secondary Indexes, which we covered in the last post&lt;/a>, but are more flexible than them because they can be created, updated, and deleted after the base table has been created, which is not true of Local Secondary Indexes.&lt;/p></description></item><item><title>Query a DynamoDB Local Secondary Index with Java</title><link>https://www.nickolasfisher.com/blog/query-a-dynamodb-local-secondary-index-with-java/</link><pubDate>Sat, 31 Oct 2020 22:49:54 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/query-a-dynamodb-local-secondary-index-with-java/</guid><description>&lt;p>DynamoDB&amp;rsquo;s Local Secondary Indexes allow for more query flexibility than a traditional partition and range key combination. They are also the only index in DynamoDB where a strongly consistent read can be requested [global secondary indexes, the other index that dynamo supports, can at best be eventually consistent]. I will walk through an example for how to use local secondary indexes in dynamo using the AWS SDK 2.0 for Java, which has full reactive support, in this post.&lt;/p></description></item><item><title>Set Time to Live [TTL] on DynamoDB Items using Java</title><link>https://www.nickolasfisher.com/blog/set-time-to-live-ttl-on-dynamodb-items-using-java/</link><pubDate>Sun, 18 Oct 2020 13:43:39 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/set-time-to-live-ttl-on-dynamodb-items-using-java/</guid><description>&lt;p>In this post, we&amp;rsquo;ll demonstrate how &lt;a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/TTL.html">expiring items in DynamoDB&lt;/a> works in java, using the AWS SDK 2.0+, which has full reactive support.&lt;/p></description></item><item><title>Querying DynamoDB in Java with the AWS SDK 2.0</title><link>https://www.nickolasfisher.com/blog/querying-dynamodb-in-java-with-the-aws-sdk-20/</link><pubDate>Sun, 18 Oct 2020 13:38:22 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/querying-dynamodb-in-java-with-the-aws-sdk-20/</guid><description>&lt;p>Queries in DynamoDB allow you to find data. This is only an option to you if your table has a partition and sort key.&lt;/p></description></item><item><title>Optimistic Locking in Java and DynamoDB</title><link>https://www.nickolasfisher.com/blog/optimistic-locking-in-java-and-dynamodb/</link><pubDate>Sun, 11 Oct 2020 20:19:42 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/optimistic-locking-in-java-and-dynamodb/</guid><description>&lt;p>I&amp;rsquo;ve previously written about using &lt;a href="https://nickolasfisher.com/blog/How-to-use-Optimistic-Locking-in-DynamoDB-via-the-AWS-CLI">conditional expressions to achieve optimistic locking in DynamoDB&lt;/a>, that example used the command line. I will now demonstrate how to do the same thing in java code, leveraging the AWS SDK 2.0 [with full reactive support].&lt;/p></description></item><item><title>Configuring an In Memory DynamoDB instance with Java for Integration Testing</title><link>https://www.nickolasfisher.com/blog/configuring-an-in-memory-dynamodb-instance-with-java-for-integration-testing/</link><pubDate>Sat, 10 Oct 2020 00:02:25 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/configuring-an-in-memory-dynamodb-instance-with-java-for-integration-testing/</guid><description>&lt;p>While using the AWS SDK 2.0, which has support for reactive programming, it became clear that there was no straightforward support for an embedded dynamo db instance for testing. I spent a fair amount of time figuring it out by starting with &lt;a href="https://github.com/aws/aws-sdk-java-v2/blob/93269d4c0416d0f72e086774265847d6af0d54ec/services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/functionaltests/LocalDynamoDb.java">this github link&lt;/a> and ultimately adapting it to my own needs.&lt;/p></description></item><item><title>How to Setup a Reactive SQS Listener Using the AWS SDK and Spring Boot</title><link>https://www.nickolasfisher.com/blog/how-to-setup-a-reactive-sqs-listener-using-the-aws-sdk-and-spring-boot/</link><pubDate>Sat, 12 Sep 2020 21:42:52 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/how-to-setup-a-reactive-sqs-listener-using-the-aws-sdk-and-spring-boot/</guid><description>&lt;p>The source code for this post &lt;a href="https://github.com/nfisher23/reactive-programming-webflux/tree/master/reactive-sqs">can be found on Github&lt;/a>.&lt;/p>
&lt;p>Following up on the previous post where we showed &lt;a href="https://nickolasfisher.com/blog/How-to-Send-SQS-Messages-to-Localstack-with-the-AWS-Java-SDK-20">how to send SQS messages to Localstack using the AWS SDK for Java 2.0&lt;/a>, we will now demonstrate how to write code that continuously polls for SQS messages, processes them, then deletes them off the queue.&lt;/p></description></item><item><title>How to Send SQS Messages to Localstack with the AWS Java SDK 2.0</title><link>https://www.nickolasfisher.com/blog/how-to-send-sqs-messages-to-localstack-with-the-aws-java-sdk-20/</link><pubDate>Sat, 12 Sep 2020 20:54:13 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/how-to-send-sqs-messages-to-localstack-with-the-aws-java-sdk-20/</guid><description>&lt;p>The source code for this post &lt;a href="https://github.com/nfisher23/reactive-programming-webflux/blob/master/README.md">can be found on Github&lt;/a>.&lt;/p>
&lt;p>The completely rewritten &lt;a href="https://docs.aws.amazon.com/sdk-for-java/v2/developer-guide/welcome.html">AWS SDK for Java 2.0&lt;/a> comes with full reactive programming support all the way down. I wanted a way to test it out without spending any more or being at risk of spending too much money, so I used &lt;a href="https://github.com/localstack/localstack">localstack&lt;/a>. This post is largely walking you through what I came up with.&lt;/p></description></item><item><title>How to Setup SNS Message Forwarding to SQS with the AWS CLI</title><link>https://www.nickolasfisher.com/blog/how-to-setup-sns-message-forwarding-to-sqs-with-the-aws-cli/</link><pubDate>Sat, 15 Aug 2020 20:42:47 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/how-to-setup-sns-message-forwarding-to-sqs-with-the-aws-cli/</guid><description>&lt;p>&lt;a href="https://docs.aws.amazon.com/sns/latest/dg/welcome.html">Amazon SNS&lt;/a> is AWS&amp;rsquo;s solution to pub/sub. In a large, distributed system, decoupling &lt;em>events&lt;/em> from services that &lt;em>need to act on those events&lt;/em> allows for teams that own different services to better work in parallel, and also prevents the need for coordinating code deploys to deliver new features. If a services is already publishing a generic event, other services can hook into that event and act on them without needing anything but a bit of infrastructure.&lt;/p></description></item><item><title>How to use Optimistic Locking in DynamoDB via the AWS CLI</title><link>https://www.nickolasfisher.com/blog/how-to-use-optimistic-locking-in-dynamodb-via-the-aws-cli/</link><pubDate>Sat, 01 Aug 2020 20:46:28 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/how-to-use-optimistic-locking-in-dynamodb-via-the-aws-cli/</guid><description>&lt;p>Optimistic Locking is a form of concurrency control that basically aims to prevent two different threads from accidentally overwriting data that another thread has already written. I covered &lt;a href="https://nickolasfisher.com/blog/Optimistic-Locking-in-MySQLExplain-Like-Im-Five">optimistic locking in MySQL&lt;/a> in a previous blog post, which may or may not be easier to understand based on your background.&lt;/p></description></item><item><title>DynamoDB Streams and Python: A Working Introduction</title><link>https://www.nickolasfisher.com/blog/dynamodb-streams-and-python-a-working-introduction/</link><pubDate>Sun, 26 Jul 2020 21:54:59 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/dynamodb-streams-and-python-a-working-introduction/</guid><description>&lt;p>DynamoDB Streams is AWS&amp;rsquo;s home grown &lt;a href="https://en.wikipedia.org/wiki/Change_data_capture">Change Data Capture [CDC]&lt;/a> mechanism, which allows the consumer of the stream to see records probably in approximately the order they were created [it&amp;rsquo;s basically impossible, at scale, to guarantee that all records across all partitions will somehow stream the data in exactly the same order that it was written]. This is a pretty fantastic feature because it allows us to reliably do &lt;em>&amp;mdash;something&amp;mdash;&lt;/em> after we add new data, update existing data, or delete existing data. As long as all the stream records are read and processed, we can ensure at least once processing on data changes and then go sleep soundly at night knowing that there is one less edge case in our application. Combine that with the natural scale that DynamoDB provides via its leaderless architecture and you can build this thing once and probably never have to worry about it handling more load ever again.&lt;/p></description></item><item><title>How to Return a Response Entity in Spring Boot Webflux</title><link>https://www.nickolasfisher.com/blog/how-to-return-a-response-entity-in-spring-boot-webflux/</link><pubDate>Sun, 19 Jul 2020 16:07:33 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/how-to-return-a-response-entity-in-spring-boot-webflux/</guid><description>&lt;p>In my last post on &lt;a href="https://nickolasfisher.com/blog/DynamoDB-and-Spring-Boot-Webflux-A-Working-Introduction">getting started with spring boot webflux and AWS DynamoDB&lt;/a>, I mentioned that it wasn&amp;rsquo;t immediately obvious to find a way to customize the response code in a spring boot &lt;strong>RestController&lt;/strong>, so I opted to use handlers instead.&lt;/p></description></item><item><title>DynamoDB and Spring Boot Webflux - A Working Introduction</title><link>https://www.nickolasfisher.com/blog/dynamodb-and-spring-boot-webflux-a-working-introduction/</link><pubDate>Sat, 18 Jul 2020 23:07:05 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/dynamodb-and-spring-boot-webflux-a-working-introduction/</guid><description>&lt;p>The source code for this post &lt;a href="https://github.com/nfisher23/webflux-and-dynamo">can be found on Github&lt;/a>.&lt;/p>
&lt;p>The &lt;a href="https://docs.aws.amazon.com/sdk-for-java/v2/developer-guide/welcome.html">latest AWS SDK for java&lt;/a> uses a reactive client to send requests to various AWS services, including DynamoDB. Reactive programming is ultimately more robust at the edges&amp;ndash;once you start experiencing latency anywhere in your stack, if your tech is not reactive, you&amp;rsquo;re going to have a significantly worse time than if it were.&lt;/p></description></item><item><title>DynamoDB Basics: A Hands On Tutorial</title><link>https://www.nickolasfisher.com/blog/dynamodb-basics-a-hands-on-tutorial/</link><pubDate>Sun, 12 Jul 2020 18:36:05 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/dynamodb-basics-a-hands-on-tutorial/</guid><description>&lt;p>DynamoDB is a fully managed distributed datastore that does a great job of alleviating the operational overhead of building very scalable systems.&lt;/p></description></item></channel></rss>