<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Consul on Nick Fisher&#39;s tech blog</title>
    <link>http://localhost:1313/tags/consul/</link>
    <description>Recent content in Consul on Nick Fisher&#39;s tech blog</description>
    <generator>Hugo</generator>
    <language>en-US</language>
    <copyright>2018-{year}</copyright>
    <lastBuildDate>Sat, 25 May 2019 22:18:42 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/consul/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to Run a Script on Cluster State Change Using Consul Watch</title>
      <link>http://localhost:1313/blog/how-to-run-a-script-on-cluster-state-change-using-consul-watch/</link>
      <pubDate>Sat, 25 May 2019 22:18:42 +0000</pubDate>
      <guid>http://localhost:1313/blog/how-to-run-a-script-on-cluster-state-change-using-consul-watch/</guid>
      <description>&lt;p&gt;You can see the sample code for this post &lt;a href=&#34;https://github.com/nfisher23/some-ansible-examples/tree/master/consul-server&#34;&gt;on Github&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.consul.io/docs/agent/watches.html&#34;&gt;Consul Watches&lt;/a&gt; offer a way to hook into changes to the Consul cluster state at runtime.The specific type of changes we will be looking at hooking into in this post are &lt;a href=&#34;https://www.consul.io/docs/agent/watches.html#type-checks&#34;&gt;checks&lt;/a&gt;. Whenever a node or service comes online and registers to Consul, whenever an existing node or service leaves Consul, or whenever an existing node or service becomes unresponsive, Consul will emit a check event. This check event can invoke a process to monitor the health of our services, alerting human being that action might soon be necessary.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to Register a Spring Boot Service to a Consul Cluster</title>
      <link>http://localhost:1313/blog/how-to-register-a-spring-boot-service-to-a-consul-cluster/</link>
      <pubDate>Sat, 25 May 2019 16:24:46 +0000</pubDate>
      <guid>http://localhost:1313/blog/how-to-register-a-spring-boot-service-to-a-consul-cluster/</guid>
      <description>&lt;p&gt;In a previous post, we saw &lt;a href=&#34;https://nickolasfisher.com/blog/How-to-Provision-a-Consul-ClientServer-Cluster-using-Ansible&#34;&gt;how to provision a simple consul client/server cluster using Ansible&lt;/a&gt;. We will now look at interacting with that cluster by showing how to register a spring boot application to it, using &lt;a href=&#34;https://cloud.spring.io/spring-cloud-consul/spring-cloud-consul.html&#34;&gt;spring cloud consul&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to Provision a Consul Client-Server Cluster using Ansible</title>
      <link>http://localhost:1313/blog/how-to-provision-a-consul-clientserver-cluster-using-ansible/</link>
      <pubDate>Sat, 27 Apr 2019 21:15:18 +0000</pubDate>
      <guid>http://localhost:1313/blog/how-to-provision-a-consul-clientserver-cluster-using-ansible/</guid>
      <description>&lt;p&gt;The source code for this blog post can be found &lt;a href=&#34;https://github.com/nfisher23/some-ansible-examples/tree/master/consul-server&#34;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.consul.io&#34;&gt;Consul&lt;/a&gt; can run in either client or server mode. As far as Consul is concerned, the primary difference between client and server mode are that Consul Servers participate in the consensus quorum, store cluster state, and handle queries. Consul Agents are often deployed to act as middle-men between the services and the Consul Servers, which need to be highly available by design.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to Provision a Standalone Consul Server with Ansible</title>
      <link>http://localhost:1313/blog/how-to-provision-a-standalone-consul-server-with-ansible/</link>
      <pubDate>Sat, 27 Apr 2019 19:49:14 +0000</pubDate>
      <guid>http://localhost:1313/blog/how-to-provision-a-standalone-consul-server-with-ansible/</guid>
      <description>&lt;p&gt;You can find the source code for this post &lt;a href=&#34;https://github.com/nfisher23/some-ansible-examples/tree/master/consul-server&#34;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.consul.io/&#34;&gt;Consul&lt;/a&gt; is a distributed service discovery engine. It&#39;s primary purpose is to track and manage services that interact with it&amp;ndash;usually via an HTTP API. It monitors the health of services in near real time, providing a more robust way of routing services to healthy and responsive nodes.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
