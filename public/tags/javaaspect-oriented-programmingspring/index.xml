<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javaaspect Oriented Programmingspring on Nick Fisher&#39;s tech blog</title>
    <link>http://localhost:1313/tags/javaaspect-oriented-programmingspring/</link>
    <description>Recent content in Javaaspect Oriented Programmingspring on Nick Fisher&#39;s tech blog</description>
    <generator>Hugo</generator>
    <language>en-US</language>
    <copyright>2018-{year}</copyright>
    <lastBuildDate>Sun, 18 Nov 2018 14:40:55 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/javaaspect-oriented-programmingspring/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to Use Spring&amp;#39;s Aspect Oriented Programming to log all Public Methods</title>
      <link>http://localhost:1313/blog/how-to-use-springs-aspect-oriented-programming-to-log-all-public-methods/</link>
      <pubDate>Sun, 18 Nov 2018 14:40:55 +0000</pubDate>
      <guid>http://localhost:1313/blog/how-to-use-springs-aspect-oriented-programming-to-log-all-public-methods/</guid>
      <description>&lt;p&gt;The sample code for this post can be found &lt;a href=&#34;https://github.com/nfisher23/spring-aop-universal-public-logger&#34;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.spring.io/spring/docs/2.5.x/reference/aop.html&#34;&gt;Aspect Oriented Programming In Spring&lt;/a&gt; is a clever way to reduce code duplication, by taking a different approach than traditional tools like dependency injection or inheritance. Cross cutting concerns like security and logging can permeate a code base and make maintainability a nightmare unless properly taken care of, and aspect oriented programming is one way to properly take care of that, when used appropriately. This post will illustrate how to get started with a transparent way to log without cluttering up business logic.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
