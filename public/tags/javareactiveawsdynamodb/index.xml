<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javareactiveawsdynamodb on Nick Fisher&#39;s tech blog</title>
    <link>http://localhost:1313/tags/javareactiveawsdynamodb/</link>
    <description>Recent content in Javareactiveawsdynamodb on Nick Fisher&#39;s tech blog</description>
    <generator>Hugo</generator>
    <language>en-US</language>
    <copyright>2018-{year}</copyright>
    <lastBuildDate>Sat, 28 Nov 2020 20:57:47 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/javareactiveawsdynamodb/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DynamoDB Transactions and Java</title>
      <link>http://localhost:1313/blog/dynamodb-transactions-and-java/</link>
      <pubDate>Sat, 28 Nov 2020 20:57:47 +0000</pubDate>
      <guid>http://localhost:1313/blog/dynamodb-transactions-and-java/</guid>
      <description>&lt;p&gt;DynamoDB transactions can be used for &lt;em&gt;atomic&lt;/em&gt; updates. Atomic updates in DynamoDB without transactions can be difficult to implement&amp;ndash;you&#39;ll often have to manage the current state of the update yourself in something like a saga, and have business logic specific rollback procedures. Further, without a transaction manager, the data will be in an inconsistent state at some point in time while the saga is ongoing. An alternative to that is a Two Phase Commit, but that&#39;s also expensive both from the standpoint of developers making it work as well as performance [2PC typically call for a lock being held during the operation, and even then there&#39;s a possibility that the operation ends up in an inconsistent state at some point].&lt;/p&gt;</description>
    </item>
    <item>
      <title>Optimistic Locking in Java and DynamoDB</title>
      <link>http://localhost:1313/blog/optimistic-locking-in-java-and-dynamodb/</link>
      <pubDate>Sun, 11 Oct 2020 20:19:42 +0000</pubDate>
      <guid>http://localhost:1313/blog/optimistic-locking-in-java-and-dynamodb/</guid>
      <description>&lt;p&gt;I&#39;ve previously written about using &lt;a href=&#34;https://nickolasfisher.com/blog/How-to-use-Optimistic-Locking-in-DynamoDB-via-the-AWS-CLI&#34;&gt;conditional expressions to achieve optimistic locking in DynamoDB&lt;/a&gt;, that example used the command line. I will now demonstrate how to do the same thing in java code, leveraging the AWS SDK 2.0 [with full reactive support].&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
