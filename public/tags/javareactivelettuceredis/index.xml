<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javareactivelettuceredis on Nick Fisher&#39;s tech blog</title>
    <link>http://localhost:1313/tags/javareactivelettuceredis/</link>
    <description>Recent content in Javareactivelettuceredis on Nick Fisher&#39;s tech blog</description>
    <generator>Hugo</generator>
    <language>en-US</language>
    <copyright>2018-{year}</copyright>
    <lastBuildDate>Sat, 01 May 2021 15:22:58 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/javareactivelettuceredis/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>An Introduction to Redis Streams via Lettuce</title>
      <link>http://localhost:1313/blog/an-introduction-to-redis-streams-via-lettuce/</link>
      <pubDate>Sat, 01 May 2021 15:22:58 +0000</pubDate>
      <guid>http://localhost:1313/blog/an-introduction-to-redis-streams-via-lettuce/</guid>
      <description>&lt;p&gt;The source code for this article &lt;a href=&#34;https://github.com/nfisher23/reactive-programming-webflux&#34;&gt;can be found on Github&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://redis.io/topics/streams-intro&#34;&gt;Redis streams&lt;/a&gt; are an interesting data structure that act as a sort of go-between for list and pub/sub operations: It&#39;s like &lt;a href=&#34;https://nickolasfisher.com/blog/Working-with-Lists-in-Redis-using-Lettuce-and-Webflux&#34;&gt;a list&lt;/a&gt; in the sense that anything pushed onto the stream is retained, it&#39;s like &lt;a href=&#34;https://nickolasfisher.com/blog/How-to-Publish-and-Subscribe-to-Redis-Using-Lettuce&#34;&gt;pub/sub&lt;/a&gt; in the sense that multiple consumers can see what is happening to it. There are many other features of streams that are covered in that article, but that&#39;s at least how you can think of it at the start.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Expiring Individual Elements in a Redis Set</title>
      <link>http://localhost:1313/blog/expiring-individual-elements-in-a-redis-set/</link>
      <pubDate>Sun, 18 Apr 2021 20:13:11 +0000</pubDate>
      <guid>http://localhost:1313/blog/expiring-individual-elements-in-a-redis-set/</guid>
      <description>&lt;p&gt;The source code for what follows &lt;a href=&#34;https://github.com/nfisher23/reactive-programming-webflux&#34;&gt;can be found on Github&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Redis does not allow you to set the expiration on individual members in a set, it only allows you to set an expiration on the entire set itself. If you want to have a sort of expiry on individual elements in a set, this article shares a workaround to that problem that works well in practice. Because I have already written a lot of &lt;a href=&#34;https://nickolasfisher.com/blog/How-to-use-Embedded-Redis-to-Test-a-Lettuce-Client-in-Spring-Boot-Webflux&#34;&gt;boilerplate code for testing any redis operation using lettuce&lt;/a&gt;, I&#39;m going to be showing you this technique using a reactive lettuce client, however the basic concept should transfer easily to any other client.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
