<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javaspringreactivetestingwebflux on Nick Fisher&#39;s tech blog</title>
    <link>http://localhost:1313/tags/javaspringreactivetestingwebflux/</link>
    <description>Recent content in Javaspringreactivetestingwebflux on Nick Fisher&#39;s tech blog</description>
    <generator>Hugo</generator>
    <language>en-US</language>
    <copyright>2018-{year}</copyright>
    <lastBuildDate>Sun, 16 Aug 2020 16:22:09 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/javaspringreactivetestingwebflux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>A Guide to Automatic Retries in Reactor</title>
      <link>http://localhost:1313/blog/a-guide-to-automatic-retries-in-reactor/</link>
      <pubDate>Sun, 16 Aug 2020 16:22:09 +0000</pubDate>
      <guid>http://localhost:1313/blog/a-guide-to-automatic-retries-in-reactor/</guid>
      <description>&lt;p&gt;The source code for this post &lt;a href=&#34;https://github.com/nfisher23/reactive-programming-webflux&#34;&gt;is available on GitHub&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;One of the nice things about a reactive programming model is there is a significantly lower risk of doomsday when things start getting latent all at once. You don&#39;t have threads upstream blocking and waiting for a response, therefore they won&#39;t all seize up and stop serving requests [or they won&#39;t short circuit if you&#39;re using a resiliency library like hystrix].&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to use Mock Server to End to End Test Any WebClient Calls in Spring Boot Webflux</title>
      <link>http://localhost:1313/blog/how-to-use-mock-server-to-end-to-end-test-any-webclient-calls-in-spring-boot-webflux/</link>
      <pubDate>Sat, 08 Aug 2020 22:44:14 +0000</pubDate>
      <guid>http://localhost:1313/blog/how-to-use-mock-server-to-end-to-end-test-any-webclient-calls-in-spring-boot-webflux/</guid>
      <description>&lt;p&gt;The source code for this post &lt;a href=&#34;https://github.com/nfisher23/reactive-programming-webflux/tree/master/mocking-and-unit-testing&#34;&gt;can be found on Github&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.mock-server.com&#34;&gt;Mock Server&lt;/a&gt; is a really simple and straightforward way to actually let your application make downstream calls and intercept them. That level of abstraction is really nice to have, and gives at least me much more confidence that my code is actually working in a microservices environment.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
