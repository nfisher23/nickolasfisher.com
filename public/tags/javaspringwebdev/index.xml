<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javaspringwebdev on Nick Fisher&#39;s tech blog</title>
    <link>http://localhost:1313/tags/javaspringwebdev/</link>
    <description>Recent content in Javaspringwebdev on Nick Fisher&#39;s tech blog</description>
    <generator>Hugo</generator>
    <language>en-US</language>
    <copyright>2018-{year}</copyright>
    <lastBuildDate>Sat, 18 May 2019 19:12:46 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/javaspringwebdev/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to Selectively Allow Cross Origin Resource Sharing in Spring Boot</title>
      <link>http://localhost:1313/blog/how-to-selectively-allow-cross-origin-resource-sharing-in-spring-boot/</link>
      <pubDate>Sat, 18 May 2019 19:12:46 +0000</pubDate>
      <guid>http://localhost:1313/blog/how-to-selectively-allow-cross-origin-resource-sharing-in-spring-boot/</guid>
      <description>&lt;p&gt;A single page application (SPA) architecture usually involves an end user getting a smattering of javascript files when he/she makes a request to a URL endpoint. After the javascript files load and start executing code, they usually make AJAX calls to interact with the back end from that point onwards. This pairs nicely with a microservice architecture based on REST over HTTP, since the front end SPA can effectively act as a client to any microservice that it needs information from.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
