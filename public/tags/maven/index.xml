<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Maven on Nick Fisher&#39;s tech blog</title>
    <link>http://localhost:1313/tags/maven/</link>
    <description>Recent content in Maven on Nick Fisher&#39;s tech blog</description>
    <generator>Hugo</generator>
    <language>en-US</language>
    <copyright>2018-{year}</copyright>
    <lastBuildDate>Sat, 27 Mar 2021 21:22:32 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/maven/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to use Embedded Redis to Test a Lettuce Client in Spring Boot Webflux</title>
      <link>http://localhost:1313/blog/how-to-use-embedded-redis-to-test-a-lettuce-client-in-spring-boot-webflux/</link>
      <pubDate>Sat, 27 Mar 2021 21:22:32 +0000</pubDate>
      <guid>http://localhost:1313/blog/how-to-use-embedded-redis-to-test-a-lettuce-client-in-spring-boot-webflux/</guid>
      <description>&lt;p&gt;The source code for this article &lt;a href=&#34;https://github.com/nfisher23/reactive-programming-webflux/tree/master/reactive-redis&#34;&gt;can be found on Github&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/lettuce-io/lettuce-core&#34;&gt;Lettuce&lt;/a&gt; is a redis client with reactive support. There is a super handy &lt;a href=&#34;https://github.com/kstyrc/embedded-redis&#34;&gt;embedded redis for java project&lt;/a&gt; out there, and this kind of integration testing inside your service is worth its weight in gold, in my humble opinion. This post will detail how to merge both of these worlds together, and set up redis integration tests when you&amp;rsquo;re using a lettuce client.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to use Caffeine Caches Effectively in Spring Boot Webflux</title>
      <link>http://localhost:1313/blog/how-to-use-caffeine-caches-effectively-in-spring-boot-webflux/</link>
      <pubDate>Sat, 13 Mar 2021 21:36:45 +0000</pubDate>
      <guid>http://localhost:1313/blog/how-to-use-caffeine-caches-effectively-in-spring-boot-webflux/</guid>
      <description>&lt;p&gt;The source code for this post &lt;a href=&#34;https://github.com/nfisher23/reactive-programming-webflux/tree/master/api-calls-and-resilience&#34;&gt;can be found on Github&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;When someone talks about a caffeine cache, they are talking about &lt;a href=&#34;https://github.com/ben-manes/caffeine&#34;&gt;Ben Manes caching library&lt;/a&gt;, which is a high performance, in memory cache written for java. If you&amp;rsquo;re using reactive streams, you can&amp;rsquo;t reliably use a LoadingCache because it&amp;rsquo;s blocking by default. Thankfully, tapping into a couple of basic features of reactive streams and caffeine can get us there.&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenAPI and Spring Boot Webflux: A Working Introduction</title>
      <link>http://localhost:1313/blog/openapi-and-spring-boot-webflux-a-working-introduction/</link>
      <pubDate>Sat, 01 Aug 2020 23:59:33 +0000</pubDate>
      <guid>http://localhost:1313/blog/openapi-and-spring-boot-webflux-a-working-introduction/</guid>
      <description>&lt;p&gt;The &lt;a href=&#34;http://spec.openapis.org/oas/v3.0.3&#34;&gt;OpenAPI Specification&lt;/a&gt; is an &amp;ldquo;industry standard&amp;rdquo; way of declaring the API interface. As REST APIs using JSON have dominated the way we move data around in most organizations and on the internet, particularly in service oriented architectures, and as documentation at almost every company has been written once, read a couple of times, then lost to the wind, smart people have figured out that they can put the documentation for their services living with the code&amp;ndash;better yet, displayed while the app is running.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to Configure Rest Assured to Record the Latency of Every Request In a Custom Way</title>
      <link>http://localhost:1313/blog/how-to-configure-rest-assured-to-record-the-latency-of-every-request-in-a-custom-way/</link>
      <pubDate>Sat, 13 Jun 2020 21:06:52 +0000</pubDate>
      <guid>http://localhost:1313/blog/how-to-configure-rest-assured-to-record-the-latency-of-every-request-in-a-custom-way/</guid>
      <description>&lt;p&gt;Sample code associated with this post can be found &lt;a href=&#34;https://github.com/nfisher23/examples-testing-stuff&#34;&gt;on Github&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rest-assured/rest-assured/wiki/Usage&#34;&gt;Rest Assured&lt;/a&gt; is a library that makes it easy to write api based automated tests in java. Recently I needed to find a way to record the latency of each request as well as some metadata about it [request path, method, things of that nature]. I found a nice way to do this with &lt;a href=&#34;https://github.com/rest-assured/rest-assured/wiki/Usage#filters&#34;&gt;rest assured filters&lt;/a&gt;, and I&amp;rsquo;m going to share that with you in this article.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to Configure Prometheus to Scrape and Aggregate Data From a Spring Boot 2.x Application</title>
      <link>http://localhost:1313/blog/how-to-configure-prometheus-to-scrape-and-aggregate-data-from-a-spring-boot-2x-application/</link>
      <pubDate>Sat, 30 May 2020 20:33:50 +0000</pubDate>
      <guid>http://localhost:1313/blog/how-to-configure-prometheus-to-scrape-and-aggregate-data-from-a-spring-boot-2x-application/</guid>
      <description>&lt;p&gt;You can see the source code for this post &lt;a href=&#34;https://github.com/nfisher23/prometheus-metrics-ex&#34;&gt;on Github&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Following up on the last post [ &lt;a href=&#34;https://nickolasfisher.com/blog/How-to-Expose-Meaningful-Prometheus-Metrics-In-a-Spring-Boot-2x-Application&#34;&gt;How to Expose Meaningful Prometheus Metrics In a Spring Boot 2.x Application&lt;/a&gt;], if we have metrics exposed but they don&amp;rsquo;t go anywhere, are there metrics exposed at all?&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to Use Nginx&#39;s Caching to Improve Site Responsiveness</title>
      <link>http://localhost:1313/blog/how-to-use-nginxs-caching-to-improve-site-responsiveness/</link>
      <pubDate>Sat, 06 Apr 2019 17:14:30 +0000</pubDate>
      <guid>http://localhost:1313/blog/how-to-use-nginxs-caching-to-improve-site-responsiveness/</guid>
      <description>&lt;p&gt;The source code for this post &lt;a href=&#34;https://github.com/nfisher23/some-ansible-examples/tree/master/reverse-proxy-nginx&#34;&gt;can be found on Github&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;In my last post, I provided an example for &lt;a href=&#34;https://nickolasfisher.com/blog/How-to-Deploy-a-Spring-MVC-Application-Behind-an-Nginx-Reverse-Proxy&#34;&gt;how to set up an Nginx Reverse Proxy for a Spring MVC application&lt;/a&gt;. One such reason to set up a reverse proxy is to utilize caching of resources. If you have dynamically generated content that doesn&amp;rsquo;t change very often, then adding caching at the site entry point can dramatically improve site responsiveness and reduce load on critical resources.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to Deploy a Spring MVC Application Behind an Nginx Reverse Proxy</title>
      <link>http://localhost:1313/blog/how-to-deploy-a-spring-mvc-application-behind-an-nginx-reverse-proxy/</link>
      <pubDate>Sat, 06 Apr 2019 14:44:50 +0000</pubDate>
      <guid>http://localhost:1313/blog/how-to-deploy-a-spring-mvc-application-behind-an-nginx-reverse-proxy/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.nginx.com/&#34;&gt;Nginx&lt;/a&gt; is a popular webserver, excellent at serving up static content, and commonly used as a load balancer or reverse proxy. This post will set up a basic &lt;a href=&#34;https://spring.io/projects/spring-boot&#34;&gt;Spring Boot&lt;/a&gt; MVC web application, and use Nginx as a reverse proxy. The source code can be found &lt;a href=&#34;https://github.com/nfisher23/some-ansible-examples/tree/master/reverse-proxy-nginx&#34;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>A Simple Zero Downtime Continuous Integration Pipeline for Spring MVC</title>
      <link>http://localhost:1313/blog/a-simple-zero-downtime-continuous-integration-pipeline-for-spring-mvc/</link>
      <pubDate>Sun, 25 Nov 2018 15:53:22 +0000</pubDate>
      <guid>http://localhost:1313/blog/a-simple-zero-downtime-continuous-integration-pipeline-for-spring-mvc/</guid>
      <description>&lt;p&gt;The sample code associated with what follows can be found &lt;a href=&#34;https://github.com/nfisher23/simple-cicd-pipeline-with-spring&#34;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;One of the biggest paradigm shifts in software engineering, since the invention of the computer and software that would run on it, was the idea of a MVR (minimum viable release) or MVP (minimum viable product). With the lack of internet access becoming the exception in developed countries, it becomes more and more powerful to put your product out there on display, and to design a way to continuously make improvements to it. In the most aggressive of circumstances, you want to be able to push something up to a source control server, then let an automated process perform the various steps required to actually deploy it in the real world. In the best case, you can achieve all of this with zero downtime&amp;ndash;basically, the users of your service are never inconvenienced by your decision to make a change. Setting up one very simple example of that is the subject of this post.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to Use Spring&#39;s Dependency Injection in Setup And Teardown Code For Integration Tests With Maven</title>
      <link>http://localhost:1313/blog/how-to-use-springs-dependency-injection-in-setup-and-teardown-code-for-integration-tests-with-maven/</link>
      <pubDate>Sat, 24 Nov 2018 15:51:32 +0000</pubDate>
      <guid>http://localhost:1313/blog/how-to-use-springs-dependency-injection-in-setup-and-teardown-code-for-integration-tests-with-maven/</guid>
      <description>&lt;p&gt;You can view the sample code for this repository &lt;a href=&#34;https://github.com/nfisher23/integration-testing-postgres-and-spring&#34;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;In our last post on &lt;a href=&#34;https://nickolasfisher.com/blog/How-to-Run-Integration-Tests-with-Setup-and-Teardown-Code-in-Maven-Build&#34;&gt;Using Maven to Setup and Teardown Integration Tests&lt;/a&gt;, we saw how to run Java code before and after our integration tests to setup and teardown any data that our tests depended on. What if we are using Spring, and we want to use our ApplicationContext, and its dependency injection/property injection features? After all, we would be testing the configuration for our specific application more than anything else, so we should be certain to use it in our setup and teardown code.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to Run Integration Tests with Setup and Teardown Code in Maven Build</title>
      <link>http://localhost:1313/blog/how-to-run-integration-tests-with-setup-and-teardown-code-in-maven-build/</link>
      <pubDate>Sat, 24 Nov 2018 14:49:09 +0000</pubDate>
      <guid>http://localhost:1313/blog/how-to-run-integration-tests-with-setup-and-teardown-code-in-maven-build/</guid>
      <description>&lt;p&gt;The sample code for this post can be found &lt;a href=&#34;https://github.com/nfisher23/integration-testing-postgres-and-spring&#34;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Unit testing with Maven is built in, and is the preferred way of validating code is performing correctly. However, sometimes you need integration testing, and most non-trivial applications built in the 21st century are reliant on network connections and databases&amp;ndash;that is, things which are inherently third party to your application. If you don&amp;rsquo;t adequately take that to account in your CI/CD pipeline, you might end up discovering that something very bad has happened after damage has already been done.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
