<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Molecule on Nick Fisher&#39;s tech blog</title>
    <link>http://localhost:1313/tags/molecule/</link>
    <description>Recent content in Molecule on Nick Fisher&#39;s tech blog</description>
    <generator>Hugo</generator>
    <language>en-US</language>
    <copyright>2018-{year}</copyright>
    <lastBuildDate>Sat, 25 May 2019 22:18:42 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/molecule/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to Run a Script on Cluster State Change Using Consul Watch</title>
      <link>http://localhost:1313/blog/how-to-run-a-script-on-cluster-state-change-using-consul-watch/</link>
      <pubDate>Sat, 25 May 2019 22:18:42 +0000</pubDate>
      <guid>http://localhost:1313/blog/how-to-run-a-script-on-cluster-state-change-using-consul-watch/</guid>
      <description>&lt;p&gt;You can see the sample code for this post &lt;a href=&#34;https://github.com/nfisher23/some-ansible-examples/tree/master/consul-server&#34;&gt;on Github&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.consul.io/docs/agent/watches.html&#34;&gt;Consul Watches&lt;/a&gt; offer a way to hook into changes to the Consul cluster state at runtime.The specific type of changes we will be looking at hooking into in this post are &lt;a href=&#34;https://www.consul.io/docs/agent/watches.html#type-checks&#34;&gt;checks&lt;/a&gt;. Whenever a node or service comes online and registers to Consul, whenever an existing node or service leaves Consul, or whenever an existing node or service becomes unresponsive, Consul will emit a check event. This check event can invoke a process to monitor the health of our services, alerting human being that action might soon be necessary.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to Provision a Consul Client-Server Cluster using Ansible</title>
      <link>http://localhost:1313/blog/how-to-provision-a-consul-clientserver-cluster-using-ansible/</link>
      <pubDate>Sat, 27 Apr 2019 21:15:18 +0000</pubDate>
      <guid>http://localhost:1313/blog/how-to-provision-a-consul-clientserver-cluster-using-ansible/</guid>
      <description>&lt;p&gt;The source code for this blog post can be found &lt;a href=&#34;https://github.com/nfisher23/some-ansible-examples/tree/master/consul-server&#34;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.consul.io&#34;&gt;Consul&lt;/a&gt; can run in either client or server mode. As far as Consul is concerned, the primary difference between client and server mode are that Consul Servers participate in the consensus quorum, store cluster state, and handle queries. Consul Agents are often deployed to act as middle-men between the services and the Consul Servers, which need to be highly available by design.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How To Upgrade Kibana using Ansible</title>
      <link>http://localhost:1313/blog/how-to-upgrade-kibana-using-ansible/</link>
      <pubDate>Sat, 23 Mar 2019 21:14:22 +0000</pubDate>
      <guid>http://localhost:1313/blog/how-to-upgrade-kibana-using-ansible/</guid>
      <description>&lt;p&gt;You can view the sample code associated with this post &lt;a href=&#34;https://github.com/nfisher23/some-ansible-examples&#34;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;In a previous post on &lt;a href=&#34;https://nickolasfisher.com/blog/How-to-Provision-a-Linux-VM-With-Kibana-Using-Ansible&#34;&gt;Provisioning a Server with Kibana&lt;/a&gt;, we saw that it&#39;s very straightforward to get kibana on a box.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to Provision a Linux VM With Kibana Using Ansible</title>
      <link>http://localhost:1313/blog/how-to-provision-a-linux-vm-with-kibana-using-ansible/</link>
      <pubDate>Sat, 16 Mar 2019 15:37:40 +0000</pubDate>
      <guid>http://localhost:1313/blog/how-to-provision-a-linux-vm-with-kibana-using-ansible/</guid>
      <description>&lt;p&gt;The corresponding source code for this post is available &lt;a href=&#34;https://github.com/nfisher23/some-ansible-examples&#34;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/products/kibana&#34;&gt;Kibana&lt;/a&gt; is a fancy pants web application that tries to make data in Elasticsearch user-friendly. Rounding out the previous two posts on &lt;a href=&#34;https://nickolasfisher.com/blog/How-to-Provision-a-Multi-Node-Elasticsearch-Cluster-Using-Ansible&#34;&gt;how to install an elasticsearch cluster&lt;/a&gt; and &lt;a href=&#34;https://nickolasfisher.com/blog/How-to-Install-Multiple-Logstash-Hosts-Using-Ansible&#34;&gt;how to install multiple logstash hosts&lt;/a&gt;, I will now show you how to stack kibana on top of them.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to do Test Driven Development on Your Ansible Roles Using Molecule</title>
      <link>http://localhost:1313/blog/how-to-do-test-driven-development-on-your-ansible-roles-using-molecule/</link>
      <pubDate>Sun, 03 Mar 2019 20:18:22 +0000</pubDate>
      <guid>http://localhost:1313/blog/how-to-do-test-driven-development-on-your-ansible-roles-using-molecule/</guid>
      <description>&lt;p&gt;You can see the sample code for this tutorial &lt;a href=&#34;https://github.com/nfisher23/some-ansible-examples&#34;&gt;on GitHub.&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;ï»¿ &lt;a href=&#34;https://molecule.readthedocs.io/en/latest/&#34;&gt;Molecule&lt;/a&gt; is primarily a way to manage the testing of infrastructure automation code. At its core, it wraps around various providers like Vagrant, Docker, or VMWare, and provides relatively simple integration with testing providers, notably &lt;a href=&#34;https://testinfra.readthedocs.io/en/latest/&#34;&gt;TestInfra&lt;/a&gt;. Molecule is a great tool, but in my opinion there are not enough resources, by way of examples, to provide an adequate getting started guide. This post is meant to help fill that void.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
