<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Redis on Nick Fisher&#39;s tech blog</title>
    <link>http://localhost:1313/tags/redis/</link>
    <description>Recent content in Redis on Nick Fisher&#39;s tech blog</description>
    <generator>Hugo</generator>
    <language>en-US</language>
    <copyright>2018-{year}</copyright>
    <lastBuildDate>Sat, 01 May 2021 15:22:58 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/redis/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>An Introduction to Redis Streams via Lettuce</title>
      <link>http://localhost:1313/blog/an-introduction-to-redis-streams-via-lettuce/</link>
      <pubDate>Sat, 01 May 2021 15:22:58 +0000</pubDate>
      <guid>http://localhost:1313/blog/an-introduction-to-redis-streams-via-lettuce/</guid>
      <description>&lt;p&gt;The source code for this article &lt;a href=&#34;https://github.com/nfisher23/reactive-programming-webflux&#34;&gt;can be found on Github&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://redis.io/topics/streams-intro&#34;&gt;Redis streams&lt;/a&gt; are an interesting data structure that act as a sort of go-between for list and pub/sub operations: It&amp;rsquo;s like &lt;a href=&#34;https://nickolasfisher.com/blog/Working-with-Lists-in-Redis-using-Lettuce-and-Webflux&#34;&gt;a list&lt;/a&gt; in the sense that anything pushed onto the stream is retained, it&amp;rsquo;s like &lt;a href=&#34;https://nickolasfisher.com/blog/How-to-Publish-and-Subscribe-to-Redis-Using-Lettuce&#34;&gt;pub/sub&lt;/a&gt; in the sense that multiple consumers can see what is happening to it. There are many other features of streams that are covered in that article, but that&amp;rsquo;s at least how you can think of it at the start.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using Redis as a Distributed Lock with Lettuce</title>
      <link>http://localhost:1313/blog/using-redis-as-a-distributed-lock-with-lettuce/</link>
      <pubDate>Sat, 01 May 2021 14:44:31 +0000</pubDate>
      <guid>http://localhost:1313/blog/using-redis-as-a-distributed-lock-with-lettuce/</guid>
      <description>&lt;p&gt;The source code for this article &lt;a href=&#34;https://github.com/nfisher23/reactive-programming-webflux&#34;&gt;can be found on Github&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Using Redis as a best effort locking mechanism can be very useful in practice, to prevent two logical threads from clobbering each other. While redis locking is certainly not perfect, and &lt;a href=&#34;https://martin.kleppmann.com/2016/02/08/how-to-do-distributed-locking.html&#34;&gt;you shouldn&amp;rsquo;t use redis locking if the underlying operation can&amp;rsquo;t be occasionally done twice&lt;/a&gt;, it can still be useful for that &amp;ldquo;best effort, do this once&amp;rdquo; use case.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Subscribing to Channels in Clustered Redis With Lettuce</title>
      <link>http://localhost:1313/blog/subscribing-to-channels-in-clustered-redis-with-lettuce/</link>
      <pubDate>Sun, 25 Apr 2021 18:43:42 +0000</pubDate>
      <guid>http://localhost:1313/blog/subscribing-to-channels-in-clustered-redis-with-lettuce/</guid>
      <description>&lt;p&gt;We already know &lt;a href=&#34;https://nickolasfisher.com/blog/Subscribing-to-Redis-Channels-with-Java-Spring-Boot-and-Lettuce&#34;&gt;how to subscribe to redis using lettuce&lt;/a&gt; when it&amp;rsquo;s not running in clustered mode. If it&amp;rsquo;s running in clustered mode, it&amp;rsquo;s not terribly different, but I did discover one thing that is interesting, which is the subject of this article.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Pre Loading Lua Scripts into Clustered Redis with Lettuce</title>
      <link>http://localhost:1313/blog/pre-loading-lua-scripts-into-clustered-redis-with-lettuce/</link>
      <pubDate>Sun, 25 Apr 2021 17:37:07 +0000</pubDate>
      <guid>http://localhost:1313/blog/pre-loading-lua-scripts-into-clustered-redis-with-lettuce/</guid>
      <description>&lt;p&gt;The source code for what follows &lt;a href=&#34;https://github.com/nfisher23/reactive-programming-webflux&#34;&gt;can be found on github&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;In a previous article, we showed how to &lt;a href=&#34;https://nickolasfisher.com/blog/Pre-Loading-a-Lua-Script-into-Redis-With-Lettuce&#34;&gt;efficiently execute a lua script in redis using lettuce&lt;/a&gt;. To really scale our caching solution horizontally [and elegantly deal with many scaling headaches], we will also want to make sure we can execute our lua scripts against clustered redis, which as we&amp;rsquo;ll see here is pretty straightforward.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Why Redis Pub/Sub is not SQS, and Vice Versa</title>
      <link>http://localhost:1313/blog/why-redis-pubsub-is-not-sqs-and-vice-versa/</link>
      <pubDate>Sat, 24 Apr 2021 23:52:19 +0000</pubDate>
      <guid>http://localhost:1313/blog/why-redis-pubsub-is-not-sqs-and-vice-versa/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://redis.io/topics/pubsub&#34;&gt;Redis has a pub/sub feature&lt;/a&gt; whereby there are publishers and subscribers, and publishers can fanout messages to subscribers. SQS [ &lt;a href=&#34;https://aws.amazon.com/sqs/&#34;&gt;amazon&amp;rsquo;s simple queue service&lt;/a&gt;] has message senders and receivers. They can both be useful, but in practice they produce different results.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Optimistic Locking in Redis with Reactive Lettuce</title>
      <link>http://localhost:1313/blog/optimistic-locking-in-redis-with-reactive-lettuce/</link>
      <pubDate>Sat, 24 Apr 2021 21:32:36 +0000</pubDate>
      <guid>http://localhost:1313/blog/optimistic-locking-in-redis-with-reactive-lettuce/</guid>
      <description>&lt;p&gt;The source code for what follows &lt;a href=&#34;https://github.com/nfisher23/reactive-programming-webflux&#34;&gt;can be found on Github&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Optimistic Locking in Redis is one of the only reasons to want to use transactions, in my opinion. You can ensure a grouping of atomic operations only occur if a watched key does not change out from underneath you. On the CLI, this might start with:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Redis Transactions, Reactive Lettuce: Buyer Beware</title>
      <link>http://localhost:1313/blog/redis-transactions-reactive-lettuce-buyer-beware/</link>
      <pubDate>Sat, 24 Apr 2021 20:48:04 +0000</pubDate>
      <guid>http://localhost:1313/blog/redis-transactions-reactive-lettuce-buyer-beware/</guid>
      <description>&lt;p&gt;The source code for what follows &lt;a href=&#34;https://github.com/nfisher23/reactive-programming-webflux&#34;&gt;can be found on Github&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Redis Transactions do not operate exactly the way you would expect if you&amp;rsquo;re coming from a relational database management system like MySQL or postrgres. It&amp;rsquo;s mostly useful for optimistic locking, but honestly there are better ways to accomplish many of the things you&amp;rsquo;re probably trying to, like &lt;a href=&#34;https://nickolasfisher.com/blog/How-to-Run-a-Lua-Script-against-Redis-using-Lettuce&#34;&gt;running a lua script with arguments&lt;/a&gt; [which is guaranteed to be atomic]. The &lt;a href=&#34;https://redis.io/topics/transactions&#34;&gt;documentation on transactions in redis&lt;/a&gt; describes some of the caveats, the biggest one probably being that it does not support rollbacks, only commits or discards.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Subscribing to Redis Channels with Java, Spring Boot, and Lettuce</title>
      <link>http://localhost:1313/blog/subscribing-to-redis-channels-with-java-spring-boot-and-lettuce/</link>
      <pubDate>Sat, 24 Apr 2021 20:05:52 +0000</pubDate>
      <guid>http://localhost:1313/blog/subscribing-to-redis-channels-with-java-spring-boot-and-lettuce/</guid>
      <description>&lt;p&gt;The source code for what follows &lt;a href=&#34;https://github.com/nfisher23/reactive-programming-webflux&#34;&gt;can be found on Github&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Pub/Sub in redis allows a publisher to send things to subscribers without knowing who is actually subscribed. In a previous post, we covered &lt;a href=&#34;https://nickolasfisher.com/blog/How-to-Publish-and-Subscribe-to-Redis-Using-Lettuce&#34;&gt;a simple unit test for publishing and subscribing to lettuce&lt;/a&gt;, but if you want to have a subscription initialized on application startup, and respond to events, we&amp;rsquo;ll have to do a bit more, which I&amp;rsquo;ll demonstrate here.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Pre Loading a Lua Script into Redis With Lettuce</title>
      <link>http://localhost:1313/blog/pre-loading-a-lua-script-into-redis-with-lettuce/</link>
      <pubDate>Sat, 24 Apr 2021 18:05:29 +0000</pubDate>
      <guid>http://localhost:1313/blog/pre-loading-a-lua-script-into-redis-with-lettuce/</guid>
      <description>&lt;p&gt;The source code for what follows &lt;a href=&#34;https://github.com/nfisher23/reactive-programming-webflux&#34;&gt;can be found on Github&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;In my last article on &lt;a href=&#34;https://nickolasfisher.com/blog/How-to-Run-a-Lua-Script-against-Redis-using-Lettuce&#34;&gt;running a lua script against redis with lettuce&lt;/a&gt;, we just sent the entire script [that redis will execute atomically] along with the arguments every time. For very small scripts this is unlikely to be a problem, but there is definitely a more efficient way to do this, using &lt;a href=&#34;https://redis.io/commands/evalsha&#34;&gt;EVALSHA&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to Run a Lua Script against Redis using Lettuce</title>
      <link>http://localhost:1313/blog/how-to-run-a-lua-script-against-redis-using-lettuce/</link>
      <pubDate>Sat, 24 Apr 2021 16:55:51 +0000</pubDate>
      <guid>http://localhost:1313/blog/how-to-run-a-lua-script-against-redis-using-lettuce/</guid>
      <description>&lt;p&gt;The source code for what follows &lt;a href=&#34;https://github.com/nfisher23/reactive-programming-webflux&#34;&gt;can be found on Github&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Running a lua script against redis is done using &lt;a href=&#34;https://redis.io/commands/eval&#34;&gt;EVAL&lt;/a&gt;. The primary benefit of using a lua script is that the entire script is guaranteed to be run at once, and nothing else will interfere with it [it&amp;rsquo;s atomic]. This allows for operating on multiple keys, or check-then-set type operations on the same key.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to Publish and Subscribe to Redis Using Lettuce</title>
      <link>http://localhost:1313/blog/how-to-publish-and-subscribe-to-redis-using-lettuce/</link>
      <pubDate>Sat, 24 Apr 2021 16:37:18 +0000</pubDate>
      <guid>http://localhost:1313/blog/how-to-publish-and-subscribe-to-redis-using-lettuce/</guid>
      <description>&lt;p&gt;The source code for what follows &lt;a href=&#34;https://github.com/nfisher23/reactive-programming-webflux&#34;&gt;can be found on Github&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Subscribing to topics in redis allows for a &lt;em&gt;fanout&lt;/em&gt; behavior, where any number of subscribers can be notified of a message from a publisher.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Expiring Individual Elements in a Redis Set</title>
      <link>http://localhost:1313/blog/expiring-individual-elements-in-a-redis-set/</link>
      <pubDate>Sun, 18 Apr 2021 20:13:11 +0000</pubDate>
      <guid>http://localhost:1313/blog/expiring-individual-elements-in-a-redis-set/</guid>
      <description>&lt;p&gt;The source code for what follows &lt;a href=&#34;https://github.com/nfisher23/reactive-programming-webflux&#34;&gt;can be found on Github&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Redis does not allow you to set the expiration on individual members in a set, it only allows you to set an expiration on the entire set itself. If you want to have a sort of expiry on individual elements in a set, this article shares a workaround to that problem that works well in practice. Because I have already written a lot of &lt;a href=&#34;https://nickolasfisher.com/blog/How-to-use-Embedded-Redis-to-Test-a-Lettuce-Client-in-Spring-Boot-Webflux&#34;&gt;boilerplate code for testing any redis operation using lettuce&lt;/a&gt;, I&amp;rsquo;m going to be showing you this technique using a reactive lettuce client, however the basic concept should transfer easily to any other client.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Lettuce, MSETNX, and Clustered Redis</title>
      <link>http://localhost:1313/blog/lettuce-msetnx-and-clustered-redis/</link>
      <pubDate>Sat, 17 Apr 2021 09:35:41 +0000</pubDate>
      <guid>http://localhost:1313/blog/lettuce-msetnx-and-clustered-redis/</guid>
      <description>&lt;p&gt;The source code for what follows &lt;a href=&#34;https://github.com/nfisher23/reactive-programming-webflux&#34;&gt;can be found on Github&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://redis.io/commands/msetnx&#34;&gt;MSETNX&lt;/a&gt; when you&amp;rsquo;re working with a single redis primary node is simple enough to understand: it sets all of the key/value pairs, or none at all. If one of the keys already exists in the cluster, then all of them are rejected.&lt;/p&gt;</description>
    </item>
    <item>
      <title>A Guide to Operating on Sorted Sets in Redis with Lettuce</title>
      <link>http://localhost:1313/blog/a-guide-to-operating-on-sorted-sets-in-redis-with-lettuce/</link>
      <pubDate>Sat, 17 Apr 2021 08:15:31 +0000</pubDate>
      <guid>http://localhost:1313/blog/a-guide-to-operating-on-sorted-sets-in-redis-with-lettuce/</guid>
      <description>&lt;p&gt;Sorted Sets in redis are one of my personal favorite tools when operating at scale. As of this writing, &lt;a href=&#34;https://redis.io/commands/#sorted_set&#34;&gt;there are over 30 unique operations you can perform against sorted sets in redis&lt;/a&gt;. This article will focus on some of the more common ones you&amp;rsquo;re going to need to know, and it will use a reactive lettuce client to demonstrate them.&lt;/p&gt;</description>
    </item>
    <item>
      <title>A Guide to Operating on Multiple Sets in Redis with Lettuce</title>
      <link>http://localhost:1313/blog/a-guide-to-operating-on-multiple-sets-in-redis-with-lettuce/</link>
      <pubDate>Sat, 17 Apr 2021 08:12:31 +0000</pubDate>
      <guid>http://localhost:1313/blog/a-guide-to-operating-on-multiple-sets-in-redis-with-lettuce/</guid>
      <description>&lt;p&gt;In the last article, we showed how to do some of the most common single set operations against redis, this article will focus on operating on multiple sets using a lettuce client against redis. Specifically, we&amp;rsquo;ll focus on subtracting, intersecting, and adding sets. The source code for what follows &lt;a href=&#34;https://github.com/nfisher23/reactive-programming-webflux&#34;&gt;can be found on Github&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>A Guide to Simple Set Operations in Redis with Lettuce</title>
      <link>http://localhost:1313/blog/a-guide-to-simple-set-operations-in-redis-with-lettuce/</link>
      <pubDate>Sat, 17 Apr 2021 08:09:37 +0000</pubDate>
      <guid>http://localhost:1313/blog/a-guide-to-simple-set-operations-in-redis-with-lettuce/</guid>
      <description>&lt;p&gt;There are, as of this writing, about &lt;a href=&#34;https://redis.io/commands/#set&#34;&gt;15 distinct operations available to someone wanting to work with sets in redis&lt;/a&gt;. This article seeks to cover some of the more basic ones using a reactive lettuce client, and &lt;a href=&#34;https://nickolasfisher.com/blog/A-Guide-to-Operating-on-Multiple-Sets-in-Redis-with-Lettuce&#34;&gt;a follow up article&lt;/a&gt; will seek to deal with explaining some of the more common operations against multiple sets, rather than a single set in this case.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Working with Redis Hashes using Lettuce And Webflux</title>
      <link>http://localhost:1313/blog/working-with-redis-hashes-using-lettuce-and-webflux/</link>
      <pubDate>Sun, 11 Apr 2021 22:26:29 +0000</pubDate>
      <guid>http://localhost:1313/blog/working-with-redis-hashes-using-lettuce-and-webflux/</guid>
      <description>&lt;p&gt;There are about &lt;a href=&#34;https://redis.io/commands/#hash&#34;&gt;15 or so commands you can execute against redis for hash types&lt;/a&gt; as of this writing. This article will demonstrate some of the more common operations you&amp;rsquo;re likely to need when using lettuce as your client.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Working with Lists in Redis using Lettuce and Webflux</title>
      <link>http://localhost:1313/blog/working-with-lists-in-redis-using-lettuce-and-webflux/</link>
      <pubDate>Sun, 11 Apr 2021 21:14:08 +0000</pubDate>
      <guid>http://localhost:1313/blog/working-with-lists-in-redis-using-lettuce-and-webflux/</guid>
      <description>&lt;p&gt;As of this writing, there are a solid &lt;a href=&#34;https://redis.io/commands/#list&#34;&gt;twenty or so commands you can execute against redis for the list data type&lt;/a&gt;. This article will be walking through some of the more common operations you are likely to need when interacting with redis and lists using lettuce, and &lt;a href=&#34;https://github.com/nfisher23/reactive-programming-webflux&#34;&gt;the source code can be found on Github&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Working with String Types in Redis using Lettuce and Webflux</title>
      <link>http://localhost:1313/blog/working-with-string-types-in-redis-using-lettuce-and-webflux/</link>
      <pubDate>Sun, 11 Apr 2021 19:01:16 +0000</pubDate>
      <guid>http://localhost:1313/blog/working-with-string-types-in-redis-using-lettuce-and-webflux/</guid>
      <description>&lt;p&gt;The source code for what follows &lt;a href=&#34;https://github.com/nfisher23/reactive-programming-webflux&#34;&gt;can be found on Github&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;There are, as of this writing, &lt;a href=&#34;https://redis.io/commands/#string&#34;&gt;27 different string operations available in the redis API&lt;/a&gt;. Lettuce appears to have interfaces that directly support all of them.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using Hashtags in Clustered Redis with Lettuce and Webflux</title>
      <link>http://localhost:1313/blog/using-hashtags-in-clustered-redis-with-lettuce-and-webflux/</link>
      <pubDate>Sun, 11 Apr 2021 16:12:09 +0000</pubDate>
      <guid>http://localhost:1313/blog/using-hashtags-in-clustered-redis-with-lettuce-and-webflux/</guid>
      <description>&lt;p&gt;In clustered redis, any non hash tagged key can be sent unpredictably [well, actually predictably, if you know the formula] to any given primary node in the cluster. The very basic way it works is:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Breaking down Lettuce MSET Commands in Clustered Redis</title>
      <link>http://localhost:1313/blog/breaking-down-lettuce-mset-commands-in-clustered-redis/</link>
      <pubDate>Sat, 10 Apr 2021 23:26:07 +0000</pubDate>
      <guid>http://localhost:1313/blog/breaking-down-lettuce-mset-commands-in-clustered-redis/</guid>
      <description>&lt;p&gt;To follow along with this post, it would be best if you have already &lt;a href=&#34;https://nickolasfisher.com/blog/Bootstrap-a-Local-Sharded-Redis-Cluster-in-Five-Minutes&#34;&gt;set up your local redis cluster&lt;/a&gt; and know how to &lt;a href=&#34;https://nickolasfisher.com/blog/Configuring-Lettuce-to-work-with-Clustered-Redis&#34;&gt;connect to a redis cluster and interact with it via Lettuce&lt;/a&gt;. And the source code for what follows &lt;a href=&#34;https://github.com/nfisher23/reactive-programming-webflux&#34;&gt;can be found on Github&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Configuring Lettuce/Webflux to work with Clustered Redis</title>
      <link>http://localhost:1313/blog/configuring-lettucewebflux-to-work-with-clustered-redis/</link>
      <pubDate>Sat, 10 Apr 2021 22:27:54 +0000</pubDate>
      <guid>http://localhost:1313/blog/configuring-lettucewebflux-to-work-with-clustered-redis/</guid>
      <description>&lt;p&gt;Lettuce has some pretty nice out of the box support for working with clustered redis. This combination&amp;ndash;a reactive client and application along with clustered redis&amp;ndash;is about as scalable, performant, and resilient as things can get in distributed systems [though there are other tradeoffs which are not the subject of this post].&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to Configure Lettuce to use Redis Read Replicas in Spring Boot Webflux</title>
      <link>http://localhost:1313/blog/how-to-configure-lettuce-to-use-redis-read-replicas-in-spring-boot-webflux/</link>
      <pubDate>Sun, 28 Mar 2021 19:22:27 +0000</pubDate>
      <guid>http://localhost:1313/blog/how-to-configure-lettuce-to-use-redis-read-replicas-in-spring-boot-webflux/</guid>
      <description>&lt;p&gt;The source code for this post &lt;a href=&#34;https://github.com/nfisher23/reactive-programming-webflux&#34;&gt;can be found on Github&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Lettuce supports reading from redis replicas, but with the caveat that it doesn&amp;rsquo;t [out of the box] provide you with the fine-grained control over &lt;em&gt;when&lt;/em&gt; to read from the replicas that you&amp;rsquo;re likely to want.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Set up a Basic Leader/Follower Redis Cluster Locally using Docker</title>
      <link>http://localhost:1313/blog/set-up-a-basic-leaderfollower-redis-cluster-locally-using-docker/</link>
      <pubDate>Sun, 28 Mar 2021 18:57:07 +0000</pubDate>
      <guid>http://localhost:1313/blog/set-up-a-basic-leaderfollower-redis-cluster-locally-using-docker/</guid>
      <description>&lt;p&gt;In general, you will want to keep your development environment and your higher environments as similar as makes sense [times it doesn&amp;rsquo;t make sense: when it costs too much], to catch bugs early and often. Here, we&amp;rsquo;ll quickly run through how to set up a leader/follower topology for redis using docker/docker-compose on your local machine.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to Configure Lettuce to connect to a local Redis Instance with Webflux</title>
      <link>http://localhost:1313/blog/how-to-configure-lettuce-to-connect-to-a-local-redis-instance-with-webflux/</link>
      <pubDate>Sun, 28 Mar 2021 17:49:16 +0000</pubDate>
      <guid>http://localhost:1313/blog/how-to-configure-lettuce-to-connect-to-a-local-redis-instance-with-webflux/</guid>
      <description>&lt;p&gt;The source code for this post &lt;a href=&#34;https://github.com/nfisher23/reactive-programming-webflux/tree/master/reactive-redis&#34;&gt;can be found on Github&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;In a previous post, we detailed &lt;a href=&#34;https://nickolasfisher.com/blog/How-to-use-a-Redis-Test-Container-with-LettuceSpring-Boot-Webflux&#34;&gt;how to write integration tests for lettuce clients in spring boot webflux&lt;/a&gt; using a redis test container. That&amp;rsquo;s fine and well when you&amp;rsquo;re just writing code for a quick feedback loop, but is useless when it comes to running the application in real life. This post will start up redis locally and then explain how to best connect to it using lettuce in webflux.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to use a Redis Test Container with Lettuce/Spring Boot Webflux</title>
      <link>http://localhost:1313/blog/how-to-use-a-redis-test-container-with-lettucespring-boot-webflux/</link>
      <pubDate>Sat, 27 Mar 2021 23:52:07 +0000</pubDate>
      <guid>http://localhost:1313/blog/how-to-use-a-redis-test-container-with-lettucespring-boot-webflux/</guid>
      <description>&lt;p&gt;The source code for this post &lt;a href=&#34;https://github.com/nfisher23/reactive-programming-webflux/tree/master/reactive-redis&#34;&gt;can be found on Github&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Another way to write integration tests for code that verifies your interactions with redis actually make sense is to use a &lt;a href=&#34;https://www.testcontainers.org/&#34;&gt;test container&lt;/a&gt;. This framework assumes you have docker up and running, but if you do it will pull a specified container image [typically you&amp;rsquo;ll just use docker hub, though it&amp;rsquo;s important to note that they rate limit you, so don&amp;rsquo;t go overboard], then you can interact with that container in your integration tests.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
