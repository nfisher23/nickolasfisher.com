<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Spring on Nick Fisher's tech blog</title><link>https://www.nickolasfisher.com/tags/spring/</link><description>Recent content in Spring on Nick Fisher's tech blog</description><generator>Hugo</generator><language>en-US</language><copyright>2018-{year}</copyright><lastBuildDate>Sat, 01 May 2021 19:06:23 +0000</lastBuildDate><atom:link href="https://www.nickolasfisher.com/tags/spring/index.xml" rel="self" type="application/rss+xml"/><item><title>Configuring, Testing, and Using Circuit Breakers on Rest API calls with Resilience4j</title><link>https://www.nickolasfisher.com/blog/configuring-testing-and-using-circuit-breakers-on-rest-api-calls-with-resilience4j/</link><pubDate>Sat, 01 May 2021 19:06:23 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/configuring-testing-and-using-circuit-breakers-on-rest-api-calls-with-resilience4j/</guid><description>&lt;p>The source code for what follows &lt;a href="https://github.com/nfisher23/java-failure-and-resilience">can be found on Github&lt;/a>.&lt;/p>
&lt;p>The circuit breaker pattern, popularized by Netflix [using Hystrix], exists for a couple of reasons, the most prominent being that it reduces load on a downstream service when it is not responding properly [presumably because it&amp;rsquo;s under duress]. By wrapping operations that might fail and get overloaded in a circuit breaker, we can prematurely prevent cascading failure and stop overloading those services.&lt;/p></description></item><item><title>How to Test Latency with a Mock Server in Java</title><link>https://www.nickolasfisher.com/blog/how-to-test-latency-with-a-mock-server-in-java/</link><pubDate>Sat, 01 May 2021 18:12:45 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/how-to-test-latency-with-a-mock-server-in-java/</guid><description>&lt;p>The source code for what follows &lt;a href="https://github.com/nfisher23/java-failure-and-resilience">can be found on Github&lt;/a>.&lt;/p>
&lt;p>Very often, you will want to test service api clients using a &lt;a href="https://www.mock-server.com/">Mock Server&lt;/a> [for example, &lt;a href="https://nickolasfisher.com/blog/How-to-use-Mock-Server-to-End-to-End-Test-Any-WebClient-Calls-in-Spring-Boot-Webflux">testing the spring webclient with mockserver&lt;/a>]. And since network latency is a fact of life, not something we can merely ignore, actually injecting some latency to simulate timeouts will give us greater confidence that our system will behave as expected.&lt;/p></description></item><item><title>Subscribing to Channels in Clustered Redis With Lettuce</title><link>https://www.nickolasfisher.com/blog/subscribing-to-channels-in-clustered-redis-with-lettuce/</link><pubDate>Sun, 25 Apr 2021 18:43:42 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/subscribing-to-channels-in-clustered-redis-with-lettuce/</guid><description>&lt;p>We already know &lt;a href="https://nickolasfisher.com/blog/Subscribing-to-Redis-Channels-with-Java-Spring-Boot-and-Lettuce">how to subscribe to redis using lettuce&lt;/a> when it&amp;rsquo;s not running in clustered mode. If it&amp;rsquo;s running in clustered mode, it&amp;rsquo;s not terribly different, but I did discover one thing that is interesting, which is the subject of this article.&lt;/p></description></item><item><title>How to Prevent DEBUG Logging by Test Containers when Running Unit Tests in Java</title><link>https://www.nickolasfisher.com/blog/how-to-prevent-debug-logging-by-test-containers-when-running-unit-tests-in-java/</link><pubDate>Sat, 24 Apr 2021 20:35:47 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/how-to-prevent-debug-logging-by-test-containers-when-running-unit-tests-in-java/</guid><description>&lt;p>I have been playing around with test containers lately [ &lt;a href="https://nickolasfisher.com/blog/How-to-use-a-Redis-Test-Container-with-LettuceSpring-Boot-Webflux">redis test containers for testing lettuce&lt;/a> and &lt;a href="https://nickolasfisher.com/blog/Setup-and-Use-a-DynamoDB-Test-Container-with-the-AWS-Java-SDK-20">dynamodb test containers for testing the AWS SDK 2.0&lt;/a>, to be specific], and I found soon after using them that I was getting by default a stream of DEBUG level logs whenever I ran my test suite. This was annoying, so I went digging for a solution.&lt;/p></description></item><item><title>Subscribing to Redis Channels with Java, Spring Boot, and Lettuce</title><link>https://www.nickolasfisher.com/blog/subscribing-to-redis-channels-with-java-spring-boot-and-lettuce/</link><pubDate>Sat, 24 Apr 2021 20:05:52 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/subscribing-to-redis-channels-with-java-spring-boot-and-lettuce/</guid><description>&lt;p>The source code for what follows &lt;a href="https://github.com/nfisher23/reactive-programming-webflux">can be found on Github&lt;/a>.&lt;/p>
&lt;p>Pub/Sub in redis allows a publisher to send things to subscribers without knowing who is actually subscribed. In a previous post, we covered &lt;a href="https://nickolasfisher.com/blog/How-to-Publish-and-Subscribe-to-Redis-Using-Lettuce">a simple unit test for publishing and subscribing to lettuce&lt;/a>, but if you want to have a subscription initialized on application startup, and respond to events, we&amp;rsquo;ll have to do a bit more, which I&amp;rsquo;ll demonstrate here.&lt;/p></description></item><item><title>Pre Loading a Lua Script into Redis With Lettuce</title><link>https://www.nickolasfisher.com/blog/pre-loading-a-lua-script-into-redis-with-lettuce/</link><pubDate>Sat, 24 Apr 2021 18:05:29 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/pre-loading-a-lua-script-into-redis-with-lettuce/</guid><description>&lt;p>The source code for what follows &lt;a href="https://github.com/nfisher23/reactive-programming-webflux">can be found on Github&lt;/a>.&lt;/p>
&lt;p>In my last article on &lt;a href="https://nickolasfisher.com/blog/How-to-Run-a-Lua-Script-against-Redis-using-Lettuce">running a lua script against redis with lettuce&lt;/a>, we just sent the entire script [that redis will execute atomically] along with the arguments every time. For very small scripts this is unlikely to be a problem, but there is definitely a more efficient way to do this, using &lt;a href="https://redis.io/commands/evalsha">EVALSHA&lt;/a>.&lt;/p></description></item><item><title>How to Run a Lua Script against Redis using Lettuce</title><link>https://www.nickolasfisher.com/blog/how-to-run-a-lua-script-against-redis-using-lettuce/</link><pubDate>Sat, 24 Apr 2021 16:55:51 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/how-to-run-a-lua-script-against-redis-using-lettuce/</guid><description>&lt;p>The source code for what follows &lt;a href="https://github.com/nfisher23/reactive-programming-webflux">can be found on Github&lt;/a>.&lt;/p>
&lt;p>Running a lua script against redis is done using &lt;a href="https://redis.io/commands/eval">EVAL&lt;/a>. The primary benefit of using a lua script is that the entire script is guaranteed to be run at once, and nothing else will interfere with it [it&amp;rsquo;s atomic]. This allows for operating on multiple keys, or check-then-set type operations on the same key.&lt;/p></description></item><item><title>How to Publish and Subscribe to Redis Using Lettuce</title><link>https://www.nickolasfisher.com/blog/how-to-publish-and-subscribe-to-redis-using-lettuce/</link><pubDate>Sat, 24 Apr 2021 16:37:18 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/how-to-publish-and-subscribe-to-redis-using-lettuce/</guid><description>&lt;p>The source code for what follows &lt;a href="https://github.com/nfisher23/reactive-programming-webflux">can be found on Github&lt;/a>.&lt;/p>
&lt;p>Subscribing to topics in redis allows for a &lt;em>fanout&lt;/em> behavior, where any number of subscribers can be notified of a message from a publisher.&lt;/p></description></item><item><title>A Guide to Operating on Sorted Sets in Redis with Lettuce</title><link>https://www.nickolasfisher.com/blog/a-guide-to-operating-on-sorted-sets-in-redis-with-lettuce/</link><pubDate>Sat, 17 Apr 2021 08:15:31 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/a-guide-to-operating-on-sorted-sets-in-redis-with-lettuce/</guid><description>&lt;p>Sorted Sets in redis are one of my personal favorite tools when operating at scale. As of this writing, &lt;a href="https://redis.io/commands/#sorted_set">there are over 30 unique operations you can perform against sorted sets in redis&lt;/a>. This article will focus on some of the more common ones you&amp;rsquo;re going to need to know, and it will use a reactive lettuce client to demonstrate them.&lt;/p></description></item><item><title>A Guide to Operating on Multiple Sets in Redis with Lettuce</title><link>https://www.nickolasfisher.com/blog/a-guide-to-operating-on-multiple-sets-in-redis-with-lettuce/</link><pubDate>Sat, 17 Apr 2021 08:12:31 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/a-guide-to-operating-on-multiple-sets-in-redis-with-lettuce/</guid><description>&lt;p>In the last article, we showed how to do some of the most common single set operations against redis, this article will focus on operating on multiple sets using a lettuce client against redis. Specifically, we&amp;rsquo;ll focus on subtracting, intersecting, and adding sets. The source code for what follows &lt;a href="https://github.com/nfisher23/reactive-programming-webflux">can be found on Github&lt;/a>.&lt;/p></description></item><item><title>A Guide to Simple Set Operations in Redis with Lettuce</title><link>https://www.nickolasfisher.com/blog/a-guide-to-simple-set-operations-in-redis-with-lettuce/</link><pubDate>Sat, 17 Apr 2021 08:09:37 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/a-guide-to-simple-set-operations-in-redis-with-lettuce/</guid><description>&lt;p>There are, as of this writing, about &lt;a href="https://redis.io/commands/#set">15 distinct operations available to someone wanting to work with sets in redis&lt;/a>. This article seeks to cover some of the more basic ones using a reactive lettuce client, and &lt;a href="https://nickolasfisher.com/blog/A-Guide-to-Operating-on-Multiple-Sets-in-Redis-with-Lettuce">a follow up article&lt;/a> will seek to deal with explaining some of the more common operations against multiple sets, rather than a single set in this case.&lt;/p></description></item><item><title>Working with Redis Hashes using Lettuce And Webflux</title><link>https://www.nickolasfisher.com/blog/working-with-redis-hashes-using-lettuce-and-webflux/</link><pubDate>Sun, 11 Apr 2021 22:26:29 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/working-with-redis-hashes-using-lettuce-and-webflux/</guid><description>&lt;p>There are about &lt;a href="https://redis.io/commands/#hash">15 or so commands you can execute against redis for hash types&lt;/a> as of this writing. This article will demonstrate some of the more common operations you&amp;rsquo;re likely to need when using lettuce as your client.&lt;/p></description></item><item><title>Working with Lists in Redis using Lettuce and Webflux</title><link>https://www.nickolasfisher.com/blog/working-with-lists-in-redis-using-lettuce-and-webflux/</link><pubDate>Sun, 11 Apr 2021 21:14:08 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/working-with-lists-in-redis-using-lettuce-and-webflux/</guid><description>&lt;p>As of this writing, there are a solid &lt;a href="https://redis.io/commands/#list">twenty or so commands you can execute against redis for the list data type&lt;/a>. This article will be walking through some of the more common operations you are likely to need when interacting with redis and lists using lettuce, and &lt;a href="https://github.com/nfisher23/reactive-programming-webflux">the source code can be found on Github&lt;/a>.&lt;/p></description></item><item><title>Working with String Types in Redis using Lettuce and Webflux</title><link>https://www.nickolasfisher.com/blog/working-with-string-types-in-redis-using-lettuce-and-webflux/</link><pubDate>Sun, 11 Apr 2021 19:01:16 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/working-with-string-types-in-redis-using-lettuce-and-webflux/</guid><description>&lt;p>The source code for what follows &lt;a href="https://github.com/nfisher23/reactive-programming-webflux">can be found on Github&lt;/a>.&lt;/p>
&lt;p>There are, as of this writing, &lt;a href="https://redis.io/commands/#string">27 different string operations available in the redis API&lt;/a>. Lettuce appears to have interfaces that directly support all of them.&lt;/p></description></item><item><title>Using Hashtags in Clustered Redis with Lettuce and Webflux</title><link>https://www.nickolasfisher.com/blog/using-hashtags-in-clustered-redis-with-lettuce-and-webflux/</link><pubDate>Sun, 11 Apr 2021 16:12:09 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/using-hashtags-in-clustered-redis-with-lettuce-and-webflux/</guid><description>&lt;p>In clustered redis, any non hash tagged key can be sent unpredictably [well, actually predictably, if you know the formula] to any given primary node in the cluster. The very basic way it works is:&lt;/p></description></item><item><title>Breaking down Lettuce MSET Commands in Clustered Redis</title><link>https://www.nickolasfisher.com/blog/breaking-down-lettuce-mset-commands-in-clustered-redis/</link><pubDate>Sat, 10 Apr 2021 23:26:07 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/breaking-down-lettuce-mset-commands-in-clustered-redis/</guid><description>&lt;p>To follow along with this post, it would be best if you have already &lt;a href="https://nickolasfisher.com/blog/Bootstrap-a-Local-Sharded-Redis-Cluster-in-Five-Minutes">set up your local redis cluster&lt;/a> and know how to &lt;a href="https://nickolasfisher.com/blog/Configuring-Lettuce-to-work-with-Clustered-Redis">connect to a redis cluster and interact with it via Lettuce&lt;/a>. And the source code for what follows &lt;a href="https://github.com/nfisher23/reactive-programming-webflux">can be found on Github&lt;/a>.&lt;/p></description></item><item><title>Configuring Lettuce/Webflux to work with Clustered Redis</title><link>https://www.nickolasfisher.com/blog/configuring-lettucewebflux-to-work-with-clustered-redis/</link><pubDate>Sat, 10 Apr 2021 22:27:54 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/configuring-lettucewebflux-to-work-with-clustered-redis/</guid><description>&lt;p>Lettuce has some pretty nice out of the box support for working with clustered redis. This combination&amp;ndash;a reactive client and application along with clustered redis&amp;ndash;is about as scalable, performant, and resilient as things can get in distributed systems [though there are other tradeoffs which are not the subject of this post].&lt;/p></description></item><item><title>How to Configure Lettuce to use Redis Read Replicas in Spring Boot Webflux</title><link>https://www.nickolasfisher.com/blog/how-to-configure-lettuce-to-use-redis-read-replicas-in-spring-boot-webflux/</link><pubDate>Sun, 28 Mar 2021 19:22:27 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/how-to-configure-lettuce-to-use-redis-read-replicas-in-spring-boot-webflux/</guid><description>&lt;p>The source code for this post &lt;a href="https://github.com/nfisher23/reactive-programming-webflux">can be found on Github&lt;/a>.&lt;/p>
&lt;p>Lettuce supports reading from redis replicas, but with the caveat that it doesn&amp;rsquo;t [out of the box] provide you with the fine-grained control over &lt;em>when&lt;/em> to read from the replicas that you&amp;rsquo;re likely to want.&lt;/p></description></item><item><title>How to Configure Lettuce to connect to a local Redis Instance with Webflux</title><link>https://www.nickolasfisher.com/blog/how-to-configure-lettuce-to-connect-to-a-local-redis-instance-with-webflux/</link><pubDate>Sun, 28 Mar 2021 17:49:16 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/how-to-configure-lettuce-to-connect-to-a-local-redis-instance-with-webflux/</guid><description>&lt;p>The source code for this post &lt;a href="https://github.com/nfisher23/reactive-programming-webflux/tree/master/reactive-redis">can be found on Github&lt;/a>.&lt;/p>
&lt;p>In a previous post, we detailed &lt;a href="https://nickolasfisher.com/blog/How-to-use-a-Redis-Test-Container-with-LettuceSpring-Boot-Webflux">how to write integration tests for lettuce clients in spring boot webflux&lt;/a> using a redis test container. That&amp;rsquo;s fine and well when you&amp;rsquo;re just writing code for a quick feedback loop, but is useless when it comes to running the application in real life. This post will start up redis locally and then explain how to best connect to it using lettuce in webflux.&lt;/p></description></item><item><title>How to use a Redis Test Container with Lettuce/Spring Boot Webflux</title><link>https://www.nickolasfisher.com/blog/how-to-use-a-redis-test-container-with-lettucespring-boot-webflux/</link><pubDate>Sat, 27 Mar 2021 23:52:07 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/how-to-use-a-redis-test-container-with-lettucespring-boot-webflux/</guid><description>&lt;p>The source code for this post &lt;a href="https://github.com/nfisher23/reactive-programming-webflux/tree/master/reactive-redis">can be found on Github&lt;/a>.&lt;/p>
&lt;p>Another way to write integration tests for code that verifies your interactions with redis actually make sense is to use a &lt;a href="https://www.testcontainers.org/">test container&lt;/a>. This framework assumes you have docker up and running, but if you do it will pull a specified container image [typically you&amp;rsquo;ll just use docker hub, though it&amp;rsquo;s important to note that they rate limit you, so don&amp;rsquo;t go overboard], then you can interact with that container in your integration tests.&lt;/p></description></item><item><title>How to use Embedded Redis to Test a Lettuce Client in Spring Boot Webflux</title><link>https://www.nickolasfisher.com/blog/how-to-use-embedded-redis-to-test-a-lettuce-client-in-spring-boot-webflux/</link><pubDate>Sat, 27 Mar 2021 21:22:32 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/how-to-use-embedded-redis-to-test-a-lettuce-client-in-spring-boot-webflux/</guid><description>&lt;p>The source code for this article &lt;a href="https://github.com/nfisher23/reactive-programming-webflux/tree/master/reactive-redis">can be found on Github&lt;/a>.&lt;/p>
&lt;p>&lt;a href="https://github.com/lettuce-io/lettuce-core">Lettuce&lt;/a> is a redis client with reactive support. There is a super handy &lt;a href="https://github.com/kstyrc/embedded-redis">embedded redis for java project&lt;/a> out there, and this kind of integration testing inside your service is worth its weight in gold, in my humble opinion. This post will detail how to merge both of these worlds together, and set up redis integration tests when you&amp;rsquo;re using a lettuce client.&lt;/p></description></item><item><title>Making Sense of Mono Error Handling in Spring Boot Webflux/Project Reactor</title><link>https://www.nickolasfisher.com/blog/making-sense-of-mono-error-handling-in-spring-boot-webfluxproject-reactor/</link><pubDate>Sun, 21 Mar 2021 18:27:16 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/making-sense-of-mono-error-handling-in-spring-boot-webfluxproject-reactor/</guid><description>&lt;p>A Reactor &lt;a href="https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html">Mono&lt;/a> comes with a lot of methods that allow you to do things when errors occur:&lt;/p></description></item><item><title>Publishing to SNS in Java with the AWS SDK 2.0</title><link>https://www.nickolasfisher.com/blog/publishing-to-sns-in-java-with-the-aws-sdk-20/</link><pubDate>Sat, 28 Nov 2020 20:16:05 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/publishing-to-sns-in-java-with-the-aws-sdk-20/</guid><description>&lt;p>SNS is a medium to broadcast messages to multiple subscribers. A common use case is to have multiple SQS queues subscribing to the same SNS topic&amp;ndash;this way, the &lt;em>publishing&lt;/em> application only needs to focus on events that are specific to its business use case, and &lt;em>subscribing&lt;/em> applications can configure an SQS queue and consume the event independently of other services. This helps organizations scale and significantly reduces the need to communicate between teams&amp;ndash;each team can focus on its contract and business use case.&lt;/p></description></item><item><title>In-Memory Caching in Sprint Boot Webflux/Project Reactor</title><link>https://www.nickolasfisher.com/blog/inmemory-caching-in-sprint-boot-webfluxproject-reactor/</link><pubDate>Sat, 03 Oct 2020 22:41:59 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/inmemory-caching-in-sprint-boot-webfluxproject-reactor/</guid><description>&lt;p>Sample code for this article &lt;a href="https://github.com/nfisher23/reactive-programming-webflux/tree/master/api-calls-and-resilience">can be found on Github&lt;/a>.&lt;/p>
&lt;p>In memory caching can significantly improve performance in a microservices environment, usually because of the tail latency involved in calling downstream services. Caching can also &lt;em>help&lt;/em> with resilience, though the extent to which that matters will depend on how you&amp;rsquo;re actually leveraging that caching. There are two flavors of caching that you&amp;rsquo;re like to want to use, the first is using the Mono as a hot source [which is demonstrated here], and the second would be when you want to &lt;a href="https://nickolasfisher.com/blog/How-to-use-Caffeine-Caches-Effectively-in-Spring-Boot-Webflux">selectively cache individual key/value pairs&lt;/a>.&lt;/p></description></item><item><title>How to Automatically Retry on a Webclient Timeout in Spring Boot Webflux</title><link>https://www.nickolasfisher.com/blog/how-to-automatically-retry-on-a-webclient-timeout-in-spring-boot-webflux/</link><pubDate>Sat, 03 Oct 2020 16:09:51 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/how-to-automatically-retry-on-a-webclient-timeout-in-spring-boot-webflux/</guid><description>&lt;p>The source code for this post &lt;a href="https://github.com/nfisher23/reactive-programming-webflux/tree/master/api-calls-and-resilience">can be found on Github&lt;/a>.&lt;/p>
&lt;p>Intermittent network flapping, or any one downstream host of several clones responding slowly, is a not uncommon thing that happens in a microservices architecture, especially if you&amp;rsquo;re using java applications, where the JIT compiler can often make initial requests slower than they ought to be.&lt;/p></description></item><item><title>How to Have a Fallback on Errors Calling Downstream Services in Spring Boot Webflux</title><link>https://www.nickolasfisher.com/blog/how-to-have-a-fallback-on-errors-calling-downstream-services-in-spring-boot-webflux/</link><pubDate>Sat, 26 Sep 2020 16:04:14 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/how-to-have-a-fallback-on-errors-calling-downstream-services-in-spring-boot-webflux/</guid><description>&lt;p>The source code for this post is &lt;a href="https://github.com/nfisher23/reactive-programming-webflux/tree/master/api-calls-and-resilience">available on Github&lt;/a>.&lt;/p>
&lt;p>Things break. When you start adding more and more microservices, things will break a lot more. This post is about how to provide a degraded experience to your users when things break.&lt;/p></description></item><item><title>How to Make Parallel API calls in Spring Boot Webflux</title><link>https://www.nickolasfisher.com/blog/how-to-make-parallel-api-calls-in-spring-boot-webflux/</link><pubDate>Sat, 19 Sep 2020 16:03:01 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/how-to-make-parallel-api-calls-in-spring-boot-webflux/</guid><description>&lt;p>The source code for this post &lt;a href="https://github.com/nfisher23/reactive-programming-webflux/tree/master/api-calls-and-resilience">can be found on Github&lt;/a>.&lt;/p>
&lt;p>Following up on the last post, which was making sequential calls to downstream services, sometimes you are in a position where you can make calls in parallel and merge the results. In this case, we want to use &lt;strong>zip&lt;/strong>.&lt;/p></description></item><item><title>How to Make Sequential API Calls and Merge the Results In Spring Boot Webflux</title><link>https://www.nickolasfisher.com/blog/how-to-make-sequential-api-calls-and-merge-the-results-in-spring-boot-webflux/</link><pubDate>Sat, 19 Sep 2020 16:01:14 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/how-to-make-sequential-api-calls-and-merge-the-results-in-spring-boot-webflux/</guid><description>&lt;p>The source code for this article &lt;a href="https://github.com/nfisher23/reactive-programming-webflux/tree/master/api-calls-and-resilience">can be found on Github&lt;/a>.&lt;/p>
&lt;p>In reactive programming, it&amp;rsquo;s a game of callbacks. In the vast majority of cases, you will want to defer all of your I/O operations to the library you are using [typically, netty, under the hood], and stay focused on setting up the flow so that the right functions are invoked in the right order. Sometimes you will want to make calls in parallel, sometimes you need data from a previous call or operation available in order to invoke that right function.&lt;/p></description></item><item><title>How to Setup a Reactive SQS Listener Using the AWS SDK and Spring Boot</title><link>https://www.nickolasfisher.com/blog/how-to-setup-a-reactive-sqs-listener-using-the-aws-sdk-and-spring-boot/</link><pubDate>Sat, 12 Sep 2020 21:42:52 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/how-to-setup-a-reactive-sqs-listener-using-the-aws-sdk-and-spring-boot/</guid><description>&lt;p>The source code for this post &lt;a href="https://github.com/nfisher23/reactive-programming-webflux/tree/master/reactive-sqs">can be found on Github&lt;/a>.&lt;/p>
&lt;p>Following up on the previous post where we showed &lt;a href="https://nickolasfisher.com/blog/How-to-Send-SQS-Messages-to-Localstack-with-the-AWS-Java-SDK-20">how to send SQS messages to Localstack using the AWS SDK for Java 2.0&lt;/a>, we will now demonstrate how to write code that continuously polls for SQS messages, processes them, then deletes them off the queue.&lt;/p></description></item><item><title>A Guide to Automatic Retries in Reactor</title><link>https://www.nickolasfisher.com/blog/a-guide-to-automatic-retries-in-reactor/</link><pubDate>Sun, 16 Aug 2020 16:22:09 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/a-guide-to-automatic-retries-in-reactor/</guid><description>&lt;p>The source code for this post &lt;a href="https://github.com/nfisher23/reactive-programming-webflux">is available on GitHub&lt;/a>.&lt;/p>
&lt;p>One of the nice things about a reactive programming model is there is a significantly lower risk of doomsday when things start getting latent all at once. You don&amp;rsquo;t have threads upstream blocking and waiting for a response, therefore they won&amp;rsquo;t all seize up and stop serving requests [or they won&amp;rsquo;t short circuit if you&amp;rsquo;re using a resiliency library like hystrix].&lt;/p></description></item><item><title>How to use Mock Server to End to End Test Any WebClient Calls in Spring Boot Webflux</title><link>https://www.nickolasfisher.com/blog/how-to-use-mock-server-to-end-to-end-test-any-webclient-calls-in-spring-boot-webflux/</link><pubDate>Sat, 08 Aug 2020 22:44:14 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/how-to-use-mock-server-to-end-to-end-test-any-webclient-calls-in-spring-boot-webflux/</guid><description>&lt;p>The source code for this post &lt;a href="https://github.com/nfisher23/reactive-programming-webflux/tree/master/mocking-and-unit-testing">can be found on Github&lt;/a>.&lt;/p>
&lt;p>&lt;a href="https://www.mock-server.com">Mock Server&lt;/a> is a really simple and straightforward way to actually let your application make downstream calls and intercept them. That level of abstraction is really nice to have, and gives at least me much more confidence that my code is actually working in a microservices environment.&lt;/p></description></item><item><title>How to Mock Dependencies and Unit Test in Spring Boot Webflux</title><link>https://www.nickolasfisher.com/blog/how-to-mock-dependencies-and-unit-test-in-spring-boot-webflux/</link><pubDate>Sat, 08 Aug 2020 22:14:53 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/how-to-mock-dependencies-and-unit-test-in-spring-boot-webflux/</guid><description>&lt;p>The source code for this post can be found &lt;a href="https://github.com/nfisher23/reactive-programming-webflux/tree/master/mocking-and-unit-testing">on Github&lt;/a>.&lt;/p>
&lt;p>The most straightforward way to write unit tests in spring boot webflux is to leverage &lt;a href="https://projectreactor.io/docs/test/release/api/reactor/test/StepVerifier.html">project reactor&amp;rsquo;s StepVerifier&lt;/a>. StepVerifier allows you to pull each item in a &lt;strong>Flux&lt;/strong> or the only potential item in a &lt;strong>Mono&lt;/strong> and make assertions about each item as it&amp;rsquo;s pulled through the chain, or make assertions about certain errors that should be thrown in the process. I&amp;rsquo;m going to quickly walk you through an example integrating mockito with it and webflux.&lt;/p></description></item><item><title>OpenAPI and Spring Boot Webflux: A Working Introduction</title><link>https://www.nickolasfisher.com/blog/openapi-and-spring-boot-webflux-a-working-introduction/</link><pubDate>Sat, 01 Aug 2020 23:59:33 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/openapi-and-spring-boot-webflux-a-working-introduction/</guid><description>&lt;p>The &lt;a href="http://spec.openapis.org/oas/v3.0.3">OpenAPI Specification&lt;/a> is an &amp;ldquo;industry standard&amp;rdquo; way of declaring the API interface. As REST APIs using JSON have dominated the way we move data around in most organizations and on the internet, particularly in service oriented architectures, and as documentation at almost every company has been written once, read a couple of times, then lost to the wind, smart people have figured out that they can put the documentation for their services living with the code&amp;ndash;better yet, displayed while the app is running.&lt;/p></description></item><item><title>How to Forward Request Headers to Downstream Services in Spring Boot Webflux</title><link>https://www.nickolasfisher.com/blog/how-to-forward-request-headers-to-downstream-services-in-spring-boot-webflux/</link><pubDate>Sun, 19 Jul 2020 19:39:10 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/how-to-forward-request-headers-to-downstream-services-in-spring-boot-webflux/</guid><description>&lt;p>The source code for this post &lt;a href="https://github.com/nfisher23/reactive-programming-webflux/tree/master/context-api">can be found on Github&lt;/a>.&lt;/p>
&lt;p>When you make the switch to a reactive codebase, &lt;a href="https://docs.oracle.com/javase/7/docs/api/java/lang/ThreadLocal.html">ThreadLocal&lt;/a> becomes effectively off limits to you, because you aren&amp;rsquo;t guaranteed that the thread that starts the request processing remains the same, even if it&amp;rsquo;s the same HTTP request. This has caused pain in many places: the original implementation of spring security, for example, relied very heavily on ThreadLocal variables to store state that happened in the start of the request, and then reuse the information stored in those variables later on to make access control decisions. &lt;a href="https://netflixtechblog.com/zuul-2-the-netflix-journey-to-asynchronous-non-blocking-systems-45947377fb5c">Neflix spoke of their pain migrating to a reactive stack&lt;/a>, when they had relied so heavily on ThreadLocal variables in most of their shared libraries.&lt;/p></description></item><item><title>How to Return a Response Entity in Spring Boot Webflux</title><link>https://www.nickolasfisher.com/blog/how-to-return-a-response-entity-in-spring-boot-webflux/</link><pubDate>Sun, 19 Jul 2020 16:07:33 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/how-to-return-a-response-entity-in-spring-boot-webflux/</guid><description>&lt;p>In my last post on &lt;a href="https://nickolasfisher.com/blog/DynamoDB-and-Spring-Boot-Webflux-A-Working-Introduction">getting started with spring boot webflux and AWS DynamoDB&lt;/a>, I mentioned that it wasn&amp;rsquo;t immediately obvious to find a way to customize the response code in a spring boot &lt;strong>RestController&lt;/strong>, so I opted to use handlers instead.&lt;/p></description></item><item><title>DynamoDB and Spring Boot Webflux - A Working Introduction</title><link>https://www.nickolasfisher.com/blog/dynamodb-and-spring-boot-webflux-a-working-introduction/</link><pubDate>Sat, 18 Jul 2020 23:07:05 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/dynamodb-and-spring-boot-webflux-a-working-introduction/</guid><description>&lt;p>The source code for this post &lt;a href="https://github.com/nfisher23/webflux-and-dynamo">can be found on Github&lt;/a>.&lt;/p>
&lt;p>The &lt;a href="https://docs.aws.amazon.com/sdk-for-java/v2/developer-guide/welcome.html">latest AWS SDK for java&lt;/a> uses a reactive client to send requests to various AWS services, including DynamoDB. Reactive programming is ultimately more robust at the edges&amp;ndash;once you start experiencing latency anywhere in your stack, if your tech is not reactive, you&amp;rsquo;re going to have a significantly worse time than if it were.&lt;/p></description></item><item><title>An Example Upgrade and Rollback of a Deployment image in Kubernetes</title><link>https://www.nickolasfisher.com/blog/an-example-upgrade-and-rollback-of-a-deployment-image-in-kubernetes/</link><pubDate>Sat, 20 Jun 2020 22:47:02 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/an-example-upgrade-and-rollback-of-a-deployment-image-in-kubernetes/</guid><description>&lt;p>In this article, I&amp;rsquo;m going to show you how to bootstrap a local kubernetes cluster with a custom image, debug it, deploy a new image, then rollback to the old image.&lt;/p></description></item><item><title>The Hystrix Parameters You Actually Need to Tune in Spring Boot</title><link>https://www.nickolasfisher.com/blog/the-hystrix-parameters-you-actually-need-to-tune-in-spring-boot/</link><pubDate>Sat, 13 Jun 2020 17:53:33 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/the-hystrix-parameters-you-actually-need-to-tune-in-spring-boot/</guid><description>&lt;p>There is some [hacky] code for this post &lt;a href="https://github.com/nfisher23/hystrix-playground">on Github&lt;/a>.&lt;/p>
&lt;p>The &lt;a href="https://github.com/Netflix/Hystrix/wiki/Configuration">number of hystrix configuration options&lt;/a>, as of this writing, is about 34. In reality, you don&amp;rsquo;t need to worry about most of them, as the defaults are perfectly reasonable. This article discusses those parameters that, in my experience, you typically need to pay attention to and tune, and I have provided some examples using spring boot&amp;rsquo;s support for hystrix via the &lt;a href="https://github.com/Netflix/Hystrix/tree/master/hystrix-contrib/hystrix-javanica">javanica library&lt;/a>.&lt;/p></description></item><item><title>How to Configure Prometheus to Scrape and Aggregate Data From a Spring Boot 2.x Application</title><link>https://www.nickolasfisher.com/blog/how-to-configure-prometheus-to-scrape-and-aggregate-data-from-a-spring-boot-2x-application/</link><pubDate>Sat, 30 May 2020 20:33:50 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/how-to-configure-prometheus-to-scrape-and-aggregate-data-from-a-spring-boot-2x-application/</guid><description>&lt;p>You can see the source code for this post &lt;a href="https://github.com/nfisher23/prometheus-metrics-ex">on Github&lt;/a>.&lt;/p>
&lt;p>Following up on the last post [ &lt;a href="https://nickolasfisher.com/blog/How-to-Expose-Meaningful-Prometheus-Metrics-In-a-Spring-Boot-2x-Application">How to Expose Meaningful Prometheus Metrics In a Spring Boot 2.x Application&lt;/a>], if we have metrics exposed but they don&amp;rsquo;t go anywhere, are there metrics exposed at all?&lt;/p></description></item><item><title>How to Expose Meaningful Prometheus Metrics In a Spring Boot 2.x Application</title><link>https://www.nickolasfisher.com/blog/how-to-expose-meaningful-prometheus-metrics-in-a-spring-boot-2x-application/</link><pubDate>Sat, 30 May 2020 19:21:40 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/how-to-expose-meaningful-prometheus-metrics-in-a-spring-boot-2x-application/</guid><description>&lt;p>The source code for this post can be found &lt;a href="https://github.com/nfisher23/prometheus-metrics-ex">on Github&lt;/a>.&lt;/p>
&lt;p>&lt;a href="https://prometheus.io/">Prometheus&lt;/a> is a metrics aggregator with its own presumed format. The basic idea is to have the application gather a set of custom metrics, then periodically collect (or &amp;ldquo;scrape&amp;rdquo;) the metrics and send them off to a prometheus server. This server will store the data in its database, and you can thus view the evolution of your application&amp;rsquo;s metrics over time.&lt;/p></description></item><item><title>The Difference Between a Reactive Non-Blocking Model and Classic Asynchronous Code</title><link>https://www.nickolasfisher.com/blog/the-difference-between-a-reactive-nonblocking-model-and-classic-asynchronous-code/</link><pubDate>Sat, 06 Jul 2019 15:10:01 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/the-difference-between-a-reactive-nonblocking-model-and-classic-asynchronous-code/</guid><description>&lt;p>Reactive Programming is a very different way of thinking about doing work in a microservices environment. Anyone who has worked with a GUI, dating back to even to windows forms, is familiar with the event based model, but what does that mean when there is unpredictable latency involved? How does handing off to a thread to make a remote call differ from this new &amp;ldquo;reactive web&amp;rdquo;?&lt;/p></description></item><item><title>How to Configure Reactive Netty in Spring Boot, in Depth</title><link>https://www.nickolasfisher.com/blog/how-to-configure-reactive-netty-in-spring-boot-in-depth/</link><pubDate>Sat, 06 Jul 2019 14:30:43 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/how-to-configure-reactive-netty-in-spring-boot-in-depth/</guid><description>&lt;p>&lt;a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html">Spring Boot&amp;rsquo;s WebFlux programming model&lt;/a> is pretty neat, but there isn&amp;rsquo;t a lot by way of explaining how to best leverage it to get the results you need. I wrote this blog post after tinkering with the configuration of Reactor Netty on Spring Boot.&lt;/p></description></item><item><title>How to Make Concurrent Service API Calls in Java Using Spring Boot</title><link>https://www.nickolasfisher.com/blog/how-to-make-concurrent-service-api-calls-in-java-using-spring-boot/</link><pubDate>Sat, 22 Jun 2019 20:48:30 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/how-to-make-concurrent-service-api-calls-in-java-using-spring-boot/</guid><description>&lt;p>The source code for this post can be found &lt;a href="https://github.com/nfisher23/java-concurrency-examples/tree/master">on GitHub&lt;/a>.&lt;/p>
&lt;p>When you&amp;rsquo;re in a microservice environment, it often makes sense to make some calls to multiple services at the same time. This allows for the time an operation needs to complete to be reduced from the &lt;em>sum&lt;/em> of all the time spent waiting to the &lt;em>maximum&lt;/em> time spent over the span of calls.&lt;/p></description></item><item><title>How to Authenticate Against a Spring Boot Service Using JWT</title><link>https://www.nickolasfisher.com/blog/how-to-authenticate-against-a-spring-boot-service-using-jwt/</link><pubDate>Sat, 22 Jun 2019 20:29:27 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/how-to-authenticate-against-a-spring-boot-service-using-jwt/</guid><description>&lt;p>havent written it&lt;/p></description></item><item><title>How to Register a Spring Boot Service to a Consul Cluster</title><link>https://www.nickolasfisher.com/blog/how-to-register-a-spring-boot-service-to-a-consul-cluster/</link><pubDate>Sat, 25 May 2019 16:24:46 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/how-to-register-a-spring-boot-service-to-a-consul-cluster/</guid><description>&lt;p>In a previous post, we saw &lt;a href="https://nickolasfisher.com/blog/How-to-Provision-a-Consul-ClientServer-Cluster-using-Ansible">how to provision a simple consul client/server cluster using Ansible&lt;/a>. We will now look at interacting with that cluster by showing how to register a spring boot application to it, using &lt;a href="https://cloud.spring.io/spring-cloud-consul/spring-cloud-consul.html">spring cloud consul&lt;/a>.&lt;/p></description></item><item><title>How to Selectively Allow Cross Origin Resource Sharing in Spring Boot</title><link>https://www.nickolasfisher.com/blog/how-to-selectively-allow-cross-origin-resource-sharing-in-spring-boot/</link><pubDate>Sat, 18 May 2019 19:12:46 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/how-to-selectively-allow-cross-origin-resource-sharing-in-spring-boot/</guid><description>&lt;p>A single page application (SPA) architecture usually involves an end user getting a smattering of javascript files when he/she makes a request to a URL endpoint. After the javascript files load and start executing code, they usually make AJAX calls to interact with the back end from that point onwards. This pairs nicely with a microservice architecture based on REST over HTTP, since the front end SPA can effectively act as a client to any microservice that it needs information from.&lt;/p></description></item><item><title>How to Migrate a Real PostgreSQL Database Using Flyway with Spring Boot</title><link>https://www.nickolasfisher.com/blog/how-to-migrate-a-real-postgresql-database-using-flyway-with-spring-boot/</link><pubDate>Sat, 20 Apr 2019 16:37:18 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/how-to-migrate-a-real-postgresql-database-using-flyway-with-spring-boot/</guid><description>&lt;p>You can see the source code for this post &lt;a href="https://github.com/nfisher23/postgres-flyway-example">on GitHub&lt;/a>.&lt;/p>
&lt;p>We spent the last post figuring out &lt;a href="https://nickolasfisher.com/blog/How-to-Migrate-An-Embedded-PostgreSQL-Database-Using-Flyway-in-Spring-Boot">how to migrate an embedded PostgreSQL database using Spring&lt;/a>, while trying to side-step the extra magic that comes along with the framework. Here, we are going to build on that work to migrate a real PostgreSQL instance, which we will build in a local Vagrant Virtual Machine.&lt;/p></description></item><item><title>How to Migrate An Embedded PostgreSQL Database Using Flyway in Spring Boot</title><link>https://www.nickolasfisher.com/blog/how-to-migrate-an-embedded-postgresql-database-using-flyway-in-spring-boot/</link><pubDate>Sat, 20 Apr 2019 16:00:34 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/how-to-migrate-an-embedded-postgresql-database-using-flyway-in-spring-boot/</guid><description>&lt;p>The source code for this post can be found &lt;a href="https://github.com/nfisher23/postgres-flyway-example">on GitHub&lt;/a>.&lt;/p>
&lt;p>&lt;a href="https://flywaydb.org/">Flyway&lt;/a> is a database migration tool. &lt;em>Migrating&lt;/em> a database generally means that you are making a change to the way the database currently structures its data. It could also mean you are adding stuff like custom stored procedures or indexes to help speed up queries. Either way, migrating databases is easily the most difficult part of any deployment strategy&amp;ndash;Flyway makes this process as painless as possible because it will, by default, &lt;em>only run migration scripts that haven&amp;rsquo;t yet run&lt;/em>.&lt;/p></description></item><item><title>How to Create an Embedded PostgreSQL Database With Spring Boot</title><link>https://www.nickolasfisher.com/blog/how-to-create-an-embedded-postgresql-database-with-spring-boot/</link><pubDate>Sat, 20 Apr 2019 15:28:25 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/how-to-create-an-embedded-postgresql-database-with-spring-boot/</guid><description>&lt;p>You can see the sample code for this post &lt;a href="https://github.com/nfisher23/postgres-flyway-example">on GitHub&lt;/a>.&lt;/p>
&lt;p>&lt;a href="https://www.postgresql.org/">PostgreSQL&lt;/a> is still my favorite database, and if a project I&amp;rsquo;m working on makes sense as a relational database model, it&amp;rsquo;s always what I reach for.&lt;/p></description></item><item><title>How To Invalidate an Nginx Cache In a Reverse Proxy Setup With Spring MVC</title><link>https://www.nickolasfisher.com/blog/how-to-invalidate-an-nginx-cache-in-a-reverse-proxy-setup-with-spring-mvc/</link><pubDate>Sat, 13 Apr 2019 16:52:53 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/how-to-invalidate-an-nginx-cache-in-a-reverse-proxy-setup-with-spring-mvc/</guid><description>&lt;p>You can see the sample code associated with this post &lt;a href="https://github.com/nfisher23/some-ansible-examples/tree/master/reverse-proxy-nginx">on Github&lt;/a>.&lt;/p>
&lt;p>In two previous posts, we looked at how to &lt;a href="https://nickolasfisher.com/blog/How-to-Deploy-a-Spring-MVC-Application-Behind-an-Nginx-Reverse-Proxy">provision a reverse proxy using nginx&lt;/a> and then &lt;a href="https://nickolasfisher.com/blog/How-to-Use-Nginxs-Caching-to-Improve-Site-Responsiveness">how to add caching to the nginx reverse proxy&lt;/a>. The implementation we ended up with at the end of the last post was a &amp;ldquo;dumb&amp;rdquo; cache, meaning that it doesn&amp;rsquo;t know when or if any data gets updated&amp;ndash;it just times out after 60 seconds and then asks for a new payload from the application it&amp;rsquo;s acting as proxy for.&lt;/p></description></item><item><title>How to Use Nginx's Caching to Improve Site Responsiveness</title><link>https://www.nickolasfisher.com/blog/how-to-use-nginxs-caching-to-improve-site-responsiveness/</link><pubDate>Sat, 06 Apr 2019 17:14:30 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/how-to-use-nginxs-caching-to-improve-site-responsiveness/</guid><description>&lt;p>The source code for this post &lt;a href="https://github.com/nfisher23/some-ansible-examples/tree/master/reverse-proxy-nginx">can be found on Github&lt;/a>.&lt;/p>
&lt;p>In my last post, I provided an example for &lt;a href="https://nickolasfisher.com/blog/How-to-Deploy-a-Spring-MVC-Application-Behind-an-Nginx-Reverse-Proxy">how to set up an Nginx Reverse Proxy for a Spring MVC application&lt;/a>. One such reason to set up a reverse proxy is to utilize caching of resources. If you have dynamically generated content that doesn&amp;rsquo;t change very often, then adding caching at the site entry point can dramatically improve site responsiveness and reduce load on critical resources.&lt;/p></description></item><item><title>How to Deploy a Spring MVC Application Behind an Nginx Reverse Proxy</title><link>https://www.nickolasfisher.com/blog/how-to-deploy-a-spring-mvc-application-behind-an-nginx-reverse-proxy/</link><pubDate>Sat, 06 Apr 2019 14:44:50 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/how-to-deploy-a-spring-mvc-application-behind-an-nginx-reverse-proxy/</guid><description>&lt;p>&lt;a href="https://www.nginx.com/">Nginx&lt;/a> is a popular webserver, excellent at serving up static content, and commonly used as a load balancer or reverse proxy. This post will set up a basic &lt;a href="https://spring.io/projects/spring-boot">Spring Boot&lt;/a> MVC web application, and use Nginx as a reverse proxy. The source code can be found &lt;a href="https://github.com/nfisher23/some-ansible-examples/tree/master/reverse-proxy-nginx">on GitHub&lt;/a>.&lt;/p></description></item><item><title>How to Use Spring's Dependency Injection in Setup And Teardown Code For Integration Tests With Maven</title><link>https://www.nickolasfisher.com/blog/how-to-use-springs-dependency-injection-in-setup-and-teardown-code-for-integration-tests-with-maven/</link><pubDate>Sat, 24 Nov 2018 15:51:32 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/how-to-use-springs-dependency-injection-in-setup-and-teardown-code-for-integration-tests-with-maven/</guid><description>&lt;p>You can view the sample code for this repository &lt;a href="https://github.com/nfisher23/integration-testing-postgres-and-spring">on GitHub&lt;/a>.&lt;/p>
&lt;p>In our last post on &lt;a href="https://nickolasfisher.com/blog/How-to-Run-Integration-Tests-with-Setup-and-Teardown-Code-in-Maven-Build">Using Maven to Setup and Teardown Integration Tests&lt;/a>, we saw how to run Java code before and after our integration tests to setup and teardown any data that our tests depended on. What if we are using Spring, and we want to use our ApplicationContext, and its dependency injection/property injection features? After all, we would be testing the configuration for our specific application more than anything else, so we should be certain to use it in our setup and teardown code.&lt;/p></description></item><item><title>How to Use Spring's Aspect Oriented Programming to log all Public Methods</title><link>https://www.nickolasfisher.com/blog/how-to-use-springs-aspect-oriented-programming-to-log-all-public-methods/</link><pubDate>Sun, 18 Nov 2018 14:40:55 +0000</pubDate><guid>https://www.nickolasfisher.com/blog/how-to-use-springs-aspect-oriented-programming-to-log-all-public-methods/</guid><description>&lt;p>The sample code for this post can be found &lt;a href="https://github.com/nfisher23/spring-aop-universal-public-logger">on GitHub&lt;/a>.&lt;/p>
&lt;p>&lt;a href="https://docs.spring.io/spring/docs/2.5.x/reference/aop.html">Aspect Oriented Programming In Spring&lt;/a> is a clever way to reduce code duplication, by taking a different approach than traditional tools like dependency injection or inheritance. Cross cutting concerns like security and logging can permeate a code base and make maintainability a nightmare unless properly taken care of, and aspect oriented programming is one way to properly take care of that, when used appropriately. This post will illustrate how to get started with a transparent way to log without cluttering up business logic.&lt;/p></description></item></channel></rss>